<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[patrickliu's blog]]></title>
  <subtitle><![CDATA[Hi, I'm 0827]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://git-patrickliu.github.io/"/>
  <updated>2017-04-03T07:50:45.000Z</updated>
  <id>http://git-patrickliu.github.io/</id>
  
  <author>
    <name><![CDATA[patrickliu]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[met-with-threejs]]></title>
    <link href="http://git-patrickliu.github.io/2017/04/03/met-with-threejs/"/>
    <id>http://git-patrickliu.github.io/2017/04/03/met-with-threejs/</id>
    <published>2017-04-03T07:50:45.000Z</published>
    <updated>2017-04-03T07:50:45.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[纯前端生成邮件签名图片]]></title>
    <link href="http://git-patrickliu.github.io/2017/04/03/generate-mail-signature-with-pure-fe/"/>
    <id>http://git-patrickliu.github.io/2017/04/03/generate-mail-signature-with-pure-fe/</id>
    <published>2017-04-03T07:35:52.000Z</published>
    <updated>2017-04-03T12:54:46.000Z</updated>
    <content type="html"><![CDATA[<p>前些天，UED的同学制作了公司统一的邮件签名，并手动帮UED的同学全部给制作了一个精美的签名。非常耗时，要给全公司推广就很麻烦了。所以就建议我们能做一个自动生成的页面。</p>
<p>本着能用JS就绝不用其他语言，能前端就不麻烦后端的思想，我小小预研了一下前端相关的技术。</p>
<ol>
<li><p>重构签名图</p>
<blockquote>
<p>这个对于前端同学就是小菜菜一碟。</p>
</blockquote>
</li>
<li><p>将dom转化为一张图片</p>
<blockquote>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Drawing_DOM_objects_into_a_canvas" target="_blank" rel="external">Drawing Dom To Canvas</a>，可以解决这个问题。因为安全问题，所有的样式和图片都需要内联，这都是小事。样式直接写进style里面，图片转成base64进行内联。</p>
</blockquote>
</li>
<li><p>将图片下载到本地</p>
<blockquote>
<ol>
<li>用canvas将图转成base64传给后台，让后台生成图片。这个依赖后台，暂时不考虑。</li>
<li>使用A链接的H5的新属性：download属性，可以将canvas的内容下载到本地。<br><img src="http://onlineimages.dapenggaofei.com/d35d927d52952f98c4c591db8d136dae.png" alt="download picture"></li>
</ol>
</blockquote>
</li>
</ol>
<p>通过上述三步，就可以实现一个纯前端的图片下载 <a href="http://demo.dapenggaofei.com/generate-mail-signature-with-pure-fe/example01/index.html" target="_blank" rel="external">查看示例</a>。</p>
<hr>
<p>前端一直在不断地发展，愈来愈多的不可能变成了可能。如果在html4的时代，纯前端生成并下载图片就是不可能的事情，但是现在却是可能的。这就需要我们不断地接受新的挑战，并且不断学习新的知识。我之前就不知道A链接新加了一个新属性download, 可以实现下载href指向的dataURI（demo当中是用 <a href="https://github.com/eligrey/FileSaver.js/" target="_blank" rel="external">FileSaver.js</a>实现的，下次可以写一个源码解析。）</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前些天，UED的同学制作了公司统一的邮件签名，并手动帮UED的同学全部给制作了一个精美的签名。非常耗时，要给全公司推广就很麻烦了。所以就建议我们能做一个自动生成的页面。</p>
<p>本着能用JS就绝不用其他语言，能前端就不麻烦后端的思想，我小小预研了一下前端相关的技术。<]]>
    </summary>
    
      <category term="blob" scheme="http://git-patrickliu.github.io/tags/blob/"/>
    
      <category term="dom to canvas" scheme="http://git-patrickliu.github.io/tags/dom-to-canvas/"/>
    
      <category term="saveAs" scheme="http://git-patrickliu.github.io/tags/saveAs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[跨域调用之iOS safari坑]]></title>
    <link href="http://git-patrickliu.github.io/2017/04/03/cross-domain-pitfall/"/>
    <id>http://git-patrickliu.github.io/2017/04/03/cross-domain-pitfall/</id>
    <published>2017-04-03T02:17:37.000Z</published>
    <updated>2017-04-03T07:23:18.000Z</updated>
    <content type="html"><![CDATA[<p>跨域调用对于前端来说真是老生常谈的一件事情, 最经常使用的场景比如是, 调用第三方支付, 第三方支付成功之后需要将状态再传回到主页面上来.</p>
<p>跨域调用有好几种方法，在这里我们不讨论。只讨论直接通过调用 <strong>top.func</strong> 的方式。</p>
<p>一般情况，我们会在主页面上iframe内嵌第三方web支付的页面，第三方支付在成功之后回调一个我们给他们的中间页面url, 我们的页面再通过top &amp;&amp; top.successCallback() 将成功/失败状态回传给我们的主页面。按说一般都没有问题，但是我们的中间页面因为要给公司里的不同域名的好几个业务公用，所以代码就写成下面这样<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(top &amp;&amp; top.successCallback) &#123;</span><br><span class="line">         top.successCallback(xxxxxx);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        top.postMessage(xxxxxxx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    top.postMessage(xxxxx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>按说一切都没有问题，也考虑足够全面。但是在iOS下的微信执行逻辑却有问题。细细定位了一下，发现是iOS对于跨域直接访问<strong>top &amp;&amp; top.func</strong> 并不会抛出异常。<a href="http://stackoverflow.com/questions/28241940/safari-not-catching-exception-when-trying-to-access-parent-window-object-with-ja" target="_blank" rel="external">点击查看详情</a>。</p>
<p>解决方案如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (top &amp;&amp; top.document) &#123;</span><br><span class="line">		<span class="keyword">if</span> (top.successCallback) &#123;</span><br><span class="line">			top.kamiPayCallback(xxxxxx);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// iPhone http://stackoverflow.com/questions/28241940/safari-not-catching-exception-when-trying-to-access-parent-window-object-with-ja</span></span><br><span class="line">		top.postMessage(xxxxxx);</span><br><span class="line">	&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">	top.postMessage(xxxxxx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>增加 <strong>top &amp;&amp; top.document</strong> 来判断是否是iOS内嵌页。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>跨域调用对于前端来说真是老生常谈的一件事情, 最经常使用的场景比如是, 调用第三方支付, 第三方支付成功之后需要将状态再传回到主页面上来.</p>
<p>跨域调用有好几种方法，在这里我们不讨论。只讨论直接通过调用 <strong>top.func</strong> 的方式。]]>
    </summary>
    
      <category term="cross domain" scheme="http://git-patrickliu.github.io/tags/cross-domain/"/>
    
      <category term="ios" scheme="http://git-patrickliu.github.io/tags/ios/"/>
    
      <category term="safari" scheme="http://git-patrickliu.github.io/tags/safari/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[将世界美景收纳怀中]]></title>
    <link href="http://git-patrickliu.github.io/2017/03/17/qiniu-add-to-favourite/"/>
    <id>http://git-patrickliu.github.io/2017/03/17/qiniu-add-to-favourite/</id>
    <published>2017-03-17T05:24:40.000Z</published>
    <updated>2017-04-03T08:23:16.000Z</updated>
    <content type="html"><![CDATA[<p>嗯。本文的主题是”将世界美景收纳怀中“， 那如何将世界美景收纳怀中呢？在浏览网站看到好的图片的时候，你是右键下载到本地，最后文件塞满了你的本地硬盘然后最终只好全部删除而收场？此时你需要一个网页自动存储图片工具。</p>
<p>当当当当，”七牛在线存图“工具闪耀登场。这个一个chrome扩展，意思就是只能在chrome浏览器当中使用，<a href="https://chrome.google.com/webstore/detail/%E4%B8%83%E7%89%9B%E5%9C%A8%E7%BA%BF%E5%AD%98%E5%9B%BE/ojgilmgaopbpimndoelnhacamaabdpni" target="_blank" rel="external">【点我下载】</a>。</p>
<p>七牛在线存图到底有什么功能呢？看看以下操作示意图就知晓了。</p>
<ol>
<li>如果不了解七牛是什么？可以先百度之。大家先需要去七牛注册一个账号<a href="https://portal.qiniu.com/signup?code=3lowmdo5c9kya" target="_blank" rel="external">【点我注册】</a>。大家可以在账号里面看到你的Access Token和 Secret Token。</li>
<li>在七牛当中创建文件空间（bucket），并在”空间设置“–》”域名设置“ 当中可以查看到此空间对应的域名。</li>
<li><p>在安装完”七牛在线存图“之后，在弹出的options.html，输入第1步和第2步的数据。<br><img src="http://7xkybo.com1.z0.glb.clouddn.com/qiniu-intro1.png" alt="七牛在线存图设置"></p>
</li>
<li><p>设置完毕之后，你就可以直接在线存图了。看到心宜的图千万不要放过。<br><img src="http://7xkybo.com1.z0.glb.clouddn.com/qiniu-intro.png" alt="在线存图操作"></p>
</li>
<li><p>存图成功之后，就会弹出新的tab，打开刚才保存的图片了。</p>
</li>
<li><p><strong>新增杀手级功能</strong>, 点击在chrome扩展区域的”存”的ICON, 会展示出:</p>
<blockquote>
<p><img src="http://onlineimages.dapenggaofei.com/59201c291ee04cfa4a93d32c6f7afe06.png" alt="ctrl+v上传"></p>
</blockquote>
</li>
</ol>
<blockquote>
<p>这一下就NB了,你可以直接用QQ等工具截图或者直接ctrl+c复制本地的一张图片,然后在这块区域中ctrl+v, 就可以直接上传七牛. 存图更加方便了.<br>我在用markdown写这篇博客的时候, 想要贴图就太方便了,截图上传拷url粘贴, 搞定!</p>
</blockquote>
<p>如果是本地上传文件到七牛，推荐这个chrome扩展，<a href="https://chrome.google.com/webstore/detail/qiniu-upload-files/emmfkgdgapbjphdolealbojmcmnphdcc" target="_blank" rel="external">【点击前往】</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>嗯。本文的主题是”将世界美景收纳怀中“， 那如何将世界美景收纳怀中呢？在浏览网站看到好的图片的时候，你是右键下载到本地，最后文件塞满了你的本地硬盘然后最终只好全部删除而收场？此时你需要一个网页自动存储图片工具。</p>
<p>当当当当，”七牛在线存图“工具闪耀登场。这个一个]]>
    </summary>
    
      <category term="Chrome扩展" scheme="http://git-patrickliu.github.io/tags/Chrome%E6%89%A9%E5%B1%95/"/>
    
      <category term="七牛" scheme="http://git-patrickliu.github.io/tags/%E4%B8%83%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[微信内嵌页返回键控制]]></title>
    <link href="http://git-patrickliu.github.io/2017/02/10/wechat-return-button-control/"/>
    <id>http://git-patrickliu.github.io/2017/02/10/wechat-return-button-control/</id>
    <published>2017-02-10T10:26:06.000Z</published>
    <updated>2017-04-03T06:33:51.000Z</updated>
    <content type="html"><![CDATA[<p>最近我们组一直在做微信公众号相关的产品。在开发过程中，大家对于微信的返回键有着愈来愈多的不满，进而想从技术层面对它进行控制（比如，注册成功页，点击返回不是回到注册页面，而是希望进入用户个人中心页）。</p>
<p>当然直接像原生App一样控制这个返回键是不可能的，因为微信没有开放返回键的JS SDK接口。和同事讨论了一下，决定从H5的history API作为切入点来进行控制。</p>
<h3 id="一、api介绍">一、api介绍</h3><p>我们知道H5的history API新增了以下三个方法:</p>
<ol>
<li>pushState</li>
<li>replaceState</li>
<li>onpopState</li>
</ol>
<p>下面我们分别对这三个方法进行说明。</p>
<ol>
<li>pushState. <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stateObj = &#123; foo: <span class="string">"bar"</span> &#125;;</span><br><span class="line">history.pushState(stateObj, <span class="string">"page 2"</span>, <span class="string">"bar.html"</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>假设当前页面url为/foo.html, 执行此方法之后，页面的url会变成/bar.html, 但是页面没有刷新，和之前页面完成一样，页面url却变了， stateObj是用于用户触发popState之后，传给页面使用的数据。”page 2”是设置的页面title。<br>pushState给history的栈里面push了一个新的项。用户点击返回，会返回到foo.html。</p>
<ol>
<li>replaceState<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stateObj = &#123; foo: <span class="string">"bar"</span> &#125;;</span><br><span class="line">history.replaceState(stateObj, <span class="string">"page 2"</span>, <span class="string">"bar.html"</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>执行此方法之后，页面的url也会变成/bar.html, 和上面不同的是，bar.html替换掉了foo.html, 点击返回不是返回foo.html, 而是返回到foo.html之前的页面。这个replaceState有什么作用呢？我经常使用的场景是这样的：把一个有多tab的页面做成一个单页，但是用户点击不同的tab，我会使用replaceState来修改页面的请求参数值，这样保证用户在其他tab刷新之后，也是定位到当前的tab，而不是每一次刷新都会到第一个tab。当然这个要和后台一起合作，当tab＝X的时候，就返回X对应的数据。</p>
<ol>
<li>onpopstate<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"popstate"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> state = e.state,</span><br><span class="line">        url = state &amp;&amp; state.url;</span><br><span class="line">    <span class="comment">/* do something here */</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>MDN上面是这么描述popstate的。</p>
<blockquote>
<p>The popstate event is fired when the active history entry changes. If the history entry being activated was created by a call to history.pushState() or was affected by a call to history.replaceState(), the popstate event’s state property contains a copy of the history entry’s state object.</p>
</blockquote>
<p>也就是说并不是每一次返回都会触发popstate，只有由pushState或是replaceState创建的history entry才会触发这个事件。这一点是需要特别注意的。</p>
<h3 id="二、解决方法">二、解决方法</h3><p>在了解完api之后，我们封装了一个统一方法backURL来统一控制微信的history的返回。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">backURL</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!url) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> currentUrl = <span class="built_in">window</span>.location.href;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">window</span>.history.replaceState(&#123;</span><br><span class="line">        url: url</span><br><span class="line">    &#125;, <span class="string">''</span>, url);</span><br><span class="line">    <span class="built_in">window</span>.history.pushState(&#123;&#125;, <span class="string">''</span>, currentUrl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"popstate"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> state = e.state,</span><br><span class="line">        url = state &amp;&amp; state.url;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!url) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.location.href = url;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>在需要指定返回的时候，只需要调用backURL的方法，就能保证点击微信的系统返回键，会返回到指定的页面。</p>
<p>比如：用户当前在index1.html, 正常点击进入index2.html, 然后我们希望用户在点击返回的时候, 能够返回到index3.html，我们在index2.html中调用了backURL(‘index3.html’), 此时history中的栈信息为<br><strong>[‘index1.html’, ‘index3.html’, ‘index2.html’]</strong>。</p>
<p>这样用户在index2.html页面点击返回的时候, 将返回到index3.html, 而不是之前的index1.html页面.</p>
<p>有同学会问，到了index3.html的时候再点击返回，不是又回到了index1.html吗？这种情况怎么解决呢？</p>
<p>针对这种情况，我们在index2.html页面调用backURL方法的时候，传入的是index3.html?backURL=encodeURIComponent(homepage.html?cantGoBack=true)，这样在index3.html中js初始化的时候，发现有传backURL的参数，就再次调用backURL(‘homepage.html?cantGoBack=true’)。到了首页发现有传cantGoBack=true, 就调用backURL传入我们的一个中转页，每次到中转页就自动又跳到当前页面 backURL(‘urlProxy.html?jumpUri=homepage.html’)。这样就首页点击返回就一直都是首页了。<a href="http://demo.dapenggaofei.com/wechat-return-button-control/example01/index1.html" target="_blank" rel="external">查看示例demo</a></p>
<h3 id="三、存在的问题">三、存在的问题</h3><p>其实这种方法还存在着一个问题还没有解决。就是我们这一套都是基于JS实现的，如果用户点击过快，还是可以绕过我们设置的障碍，跳到我们不希望用户查看到的页面去了。这个还没有想到比较好的解决方案….</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近我们组一直在做微信公众号相关的产品。在开发过程中，大家对于微信的返回键有着愈来愈多的不满，进而想从技术层面对它进行控制（比如，注册成功页，点击返回不是回到注册页面，而是希望进入用户个人中心页）。</p>
<p>当然直接像原生App一样控制这个返回键是不可能的，因为微信没]]>
    </summary>
    
      <category term="微信内嵌页" scheme="http://git-patrickliu.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%86%85%E5%B5%8C%E9%A1%B5/"/>
    
      <category term="返回键控制" scheme="http://git-patrickliu.github.io/tags/%E8%BF%94%E5%9B%9E%E9%94%AE%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[杜绝cookie污染，一键清空域下所有cookie]]></title>
    <link href="http://git-patrickliu.github.io/2017/02/03/clear-all-cookies/"/>
    <id>http://git-patrickliu.github.io/2017/02/03/clear-all-cookies/</id>
    <published>2017-02-03T02:13:03.000Z</published>
    <updated>2017-04-03T06:35:51.000Z</updated>
    <content type="html"><![CDATA[<p>cookie对前端的重要性不言而喻，而cookie的错乱会影响用户的功能，甚至可能在cookie失效之前一直用不上我们的页面。在PC时代我们还可能去引导用户在浏览器中主动清除一下缓存和cookie, 但是在手机时代，很多时候我们都不清楚去哪里清除缓存和cookie了。所以做一个通用的清空域下的工具就势在必行了。</p>
<p>原因都是最近一直在做微信公众号相关的项目，而在iOS下的微信内嵌页的调试真是灾难级别的。最近就碰到了一件事情，就是测试同学打开微信公众号里我们的内嵌页一直重复授权。原因就是后台设置了正常的登录态，但是微信内嵌页传到服务器的登录态都是空的。导致一直重复授权失败。</p>
<p>这个原因很简单，就是后台在某一次设置登录态（后来也证明确实存在）的时候，设置错了登录态cookie的路径和域名。比如说，我们一般都设置在根域下(52shangchao.com)的，path=/下面。但是某一次设置在了二级域(mp.52shangchao.com)下, path=某一个路径(/froadmall/m/xxxxxx)下面。这样每次访问对应的那个页面，上送的登录态的cookie都有两个值，但是他们的优化级是不一样的。一般情况下更具体的domain+path会具有更高的优先级。这样错设的cookie就有更高的优化级，导致每一次后台校验登录态都是失效的。对于这个问题的处理很简单只要把后台错设的那个cookie值删除就好了。那其实有更多场景我们不知道用户的域下被错设的cookie的pathname和domain是多少。导致我们不能正确删除该cookie值。只能说浏览器还没有提供一个方法可以一次性清除域下的所有cookie。</p>
<p>对于了解这一块的前端同学应该知道，我们种一个cookie需要指定cookie的domain, path和expires时间（如果没有指定会取默认值），而清除cookie也要指定cookie的domain, path和expires(设置为当前时刻之前的时刻就可以了)。但是对于iOS微信这样一个黑盒子，我们是不知道当前的cookie值设置的domain和path值是多少的。通过document.domain获取的也只是有cookie的key和value值而已。</p>
<p>对于设置cookie来说，我们只能在本域或本域的降级域名种cookie, 以及页面pathname的子path设置cookie。所以下面想出了一个清除域下所有ookie的一个思路：</p>
<blockquote>
<ol>
<li><p>通过document.domain取出所有的cookie名</p>
</li>
<li><p>我们的页面域名是 <em>mp.52shangchao.com</em>,</p>
</li>
<li><p>页面有很多比如有 <em>/froadmall/m/home/index</em></p>
</li>
<li><p>所以上面设置cookie的组合domain x path 有:</p>
</li>
</ol>
<blockquote>
<p>[52shanghchao.com] x [/, /froadmall, /froadmall/, /froadmall/m, /froadmall/m/, /froadmall/home, /froadmall/home/, /froadmall/home/index]</p>
<p>[mp.52shangchao.com] x [/, /froadmall, /froadmall/, /froadmall/m, /froadmall/m/, /froadmall/home, /froadmall/home/, /froadmall/home/index]</p>
</blockquote>
</blockquote>
<p>下面需要的就是在业务的每一个页面下新建一个虚拟页面，如/froadmall/m/home/index/clearCookieVirtual.html， （这个页面可以在Nginx层直接rewrite到一个公用的页面）,这个页面就负责把指定的域名的上面组合都清空就好了。</p>
<p>在实际操作过程中发现了一个坑，就是以点开头的domain和没有点开头的domain的区别。<br><img src="http://onlineimages.dapenggaofei.com/68995c1bc3be99db35aef63579587b93.png" alt="domain"><br>在设置cookie的时候，如果没有主动指定域名，就会设置成www.52shangchao.com, 表示这个cookie仅对www.52shangchao.com有效，对x.www.52shangchao.com是无效的。 如果主动指定了www.52shangchao.com的域名，在chrome开发工具当中就会显示出.www.52shangchao.com，表示该cookie不仅对www.52shangchao.com有效，还对x.www.52shangchao.com有效。具体可以查看stackoverflow上的讨论 <a href="http://stackoverflow.com/questions/5688491/unable-to-delete-cookie-from-javascript" target="_blank" rel="external">unable-to-delete-cookie-from-javascript</a> &amp;&amp; <a href="http://stackoverflow.com/questions/9618217/what-does-the-dot-prefix-in-the-cookie-domain-mean" target="_blank" rel="external">what-does-the-dot-prefix-in-the-cookie-domain-mean</a>。这样在清除的时候还必须考虑没有指定domain时的这个特殊情况。</p>
<p><a href="http://demo.dapenggaofei.com/clear-all-cookies/example01/clearCookies.html" target="_blank" rel="external">点击查看demo</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>cookie对前端的重要性不言而喻，而cookie的错乱会影响用户的功能，甚至可能在cookie失效之前一直用不上我们的页面。在PC时代我们还可能去引导用户在浏览器中主动清除一下缓存和cookie, 但是在手机时代，很多时候我们都不清楚去哪里清除缓存和cookie了。所以做]]>
    </summary>
    
      <category term="clearAllCookie" scheme="http://git-patrickliu.github.io/tags/clearAllCookie/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[NGINX+LUA实现简单的灰度发布]]></title>
    <link href="http://git-patrickliu.github.io/2016/06/11/nginx-lua-gray-md/"/>
    <id>http://git-patrickliu.github.io/2016/06/11/nginx-lua-gray-md/</id>
    <published>2016-06-10T23:28:27.000Z</published>
    <updated>2017-04-03T01:09:30.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://ppt.dapenggaofei.com/md/introductionToNginxLua.md" target="_blank" rel="external">查看ppt</a></p>
<p>感谢国人agentzh，让我们能够以一种更加简单的方式来控制Nginx。即：使用脚本语言LUA来嵌入到Nginx当中来进行编程。</p>
<p>我们一期实现的灰度功能比较简单。原理是通过读取用户请求cookie(如uuid)是否在redis的白名单当中，来让用户定向到不同的Web后端机器。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- read cookie &amp; set to ctx.clientUID</span></span><br><span class="line"><span class="keyword">local</span> cookieName = ngx.ctx.cookieName</span><br><span class="line"><span class="keyword">local</span> ck = <span class="built_in">require</span> <span class="string">"resty.cookie"</span></span><br><span class="line"><span class="keyword">local</span> cookie, err = ck:new()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> cookie <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- new resty.cookie failed</span></span><br><span class="line">    ngx.log(ngx.ERR, <span class="string">"new cookie failed"</span>, err)</span><br><span class="line">    ngx.exec(<span class="string">"@defaultProxy"</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> field, err = cookie:get(cookieName)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> field <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- uid is nil</span></span><br><span class="line">    <span class="comment">-- set ngx.ctx.clientUID to nil</span></span><br><span class="line">    ngx.ctx.clientUID = <span class="keyword">nil</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment">-- uid is not nil</span></span><br><span class="line"><span class="comment">-- set ngx.ctx to field value</span></span><br><span class="line">    ngx.ctx.clientUID = field</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- query the clientUID in redis and decide which upstream to go</span></span><br><span class="line"><span class="keyword">local</span> clientUID = ngx.ctx.clientUID</span><br><span class="line"><span class="keyword">local</span> redisKey = ngx.ctx.redisKey</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> clientUID <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- directly upstream to online module</span></span><br><span class="line">    ngx.exec(<span class="string">"@defaultProxy"</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment">-- clientUID is not empty</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">putIntoPool</span> <span class="params">(redCon)</span></span></span><br><span class="line">        <span class="keyword">local</span> ok, err = redCon:set_keepalive(<span class="number">10000</span>, <span class="number">100</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span></span><br><span class="line">            ngx.log(ngx.ERR, <span class="string">"redis set keepalive failed"</span>, err)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">closeCon</span> <span class="params">(redCon)</span></span></span><br><span class="line">        <span class="keyword">local</span> ok, err = redCon:close()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span></span><br><span class="line">            ngx.log(ngx.ERR, <span class="string">"close redis connection failed"</span>, err)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- request redis</span></span><br><span class="line">    <span class="keyword">local</span> redis = <span class="built_in">require</span> <span class="string">"resty.redis"</span></span><br><span class="line">    <span class="keyword">local</span> red, err = redis:new()</span><br><span class="line">    red:set_timeout(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> red <span class="keyword">then</span></span><br><span class="line">       ngx.log(ngx.ERR, <span class="string">"new redis error"</span>, err)</span><br><span class="line">       ngx.exec(<span class="string">"@defaultProxy"</span>)</span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- redis config</span></span><br><span class="line">    <span class="keyword">local</span> redisIP = ngx.ctx.redisIP</span><br><span class="line">    <span class="keyword">local</span> redisPort = ngx.ctx.redisPort</span><br><span class="line">    <span class="keyword">local</span> ok, err = red:connect(redisIP, redisPort)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span></span><br><span class="line">       ngx.log(ngx.ERR, <span class="string">"connect redis error"</span>, err)</span><br><span class="line">       ngx.exec(<span class="string">"@defaultProxy"</span>)</span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">-- red:sismember(redisKey, clientUID)</span></span><br><span class="line">    <span class="comment">-- if return 1, upstream to gray</span></span><br><span class="line">    <span class="comment">-- else if return 0, upstream to online module</span></span><br><span class="line">    <span class="keyword">local</span> isGray, err = red:sismember(redisKey, clientUID)</span><br><span class="line">    <span class="keyword">if</span> isGray ~= <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">        <span class="comment">-- put into connection pool</span></span><br><span class="line">        putIntoPool(red)</span><br><span class="line"></span><br><span class="line">        <span class="comment">-- not in redis</span></span><br><span class="line">        <span class="keyword">if</span> isGray == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">            ngx.log(ngx.ERR, redisKey..<span class="string">" "</span>..clientUID..<span class="string">" is not in gray"</span>)</span><br><span class="line">            ngx.exec(<span class="string">"@defaultProxy"</span>)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ngx.log(ngx.ERR, <span class="string">" sismember error "</span>, err)</span><br><span class="line">            ngx.exec(<span class="string">"@defaultProxy"</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    ngx.log(ngx.ERR, redisKey..<span class="string">" "</span>..clientUID..<span class="string">" is in gray"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- put into connection pool</span></span><br><span class="line">    putIntoPool(red)</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- navigate to grayProxy</span></span><br><span class="line">    ngx.exec(<span class="string">"@grayProxy"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://ppt.dapenggaofei.com/md/introductionToNginxLua.md" target="_blank" rel="external">查看ppt</a></p>
<p>感谢国人agentzh，让我们能够以一种更加]]>
    </summary>
    
      <category term="LUA" scheme="http://git-patrickliu.github.io/tags/LUA/"/>
    
      <category term="NGINX" scheme="http://git-patrickliu.github.io/tags/NGINX/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自适应雪碧图]]></title>
    <link href="http://git-patrickliu.github.io/2016/03/12/adaptive-sprite/"/>
    <id>http://git-patrickliu.github.io/2016/03/12/adaptive-sprite/</id>
    <published>2016-03-12T09:33:47.000Z</published>
    <updated>2016-03-12T09:35:45.000Z</updated>
    <content type="html"><![CDATA[<p>说起雪碧图，前端新老司机们应该都不陌生。通过将页面中琐碎的小图合成一张大图，可以减少页面请求数，加快页面加载速度。</p>
<p>但是对于自适应雪碧图，大家可能了解的不多。这里给大家介绍一种可以自适应的雪碧图，就是雪碧图里面的子图可以自适应不同大小的标签。<a href="https://jsfiddle.net/dapenggaofei/rjm4ykj2/" target="_blank" rel="external">狠狠点击查看效果</a>。</p>
<p>实现的原理其实也挺简单的，主要是应用了CSS3的 <strong>background-size</strong> 的属性。在用compass合并雪碧图之后，图片的background-position其实都已经算好了，将对应的class放置到我们的标签上，背景图片至少应该出现（或部分出现）在我们的标签之中，现在我们需要的就是通过background-size放大或缩小图片，将我们需要的背景图片放置在标签之中。</p>
<p>那是放大或缩小多少倍呢？下面我们可以看以下一个简略的推导过程（我们只推演宽度的情况，高度是同理的）。<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 假设合成之后的雪碧图宽是 W1, 需要显示的子图片宽度是 W2, 以子图为背景的标签宽度是 W3，background-size的宽度是x</span><br><span class="line"><span class="number">2.</span> 有公式 x/W3 = W1/W2 =&gt; x = W1*W3/W2</span><br><span class="line"><span class="number">3.</span> 所以 background-size 的宽度值为 W1*W3/W2</span><br></pre></td></tr></table></figure></p>
<p>经过上面算出来的background-size正好满足了让子图的正好出现在所需要的标签当中。标签宽度变化，只要更改background-size的值就可以了，而这一些都可以用compass去自动帮大家生成。从而实现了一个自适应的雪碧图。</p>
<p>大家可以去我的github上查看实现的compass的源代码和实例 (<a href="https://github.com/git-patrickliu/responsive-compass-sprite" target="_blank" rel="external">即刻前往</a>)。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>说起雪碧图，前端新老司机们应该都不陌生。通过将页面中琐碎的小图合成一张大图，可以减少页面请求数，加快页面加载速度。</p>
<p>但是对于自适应雪碧图，大家可能了解的不多。这里给大家介绍一种可以自适应的雪碧图，就是雪碧图里面的子图可以自适应不同大小的标签。<a href="]]>
    </summary>
    
      <category term="adaptive" scheme="http://git-patrickliu.github.io/tags/adaptive/"/>
    
      <category term="compass" scheme="http://git-patrickliu.github.io/tags/compass/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[float-calculation]]></title>
    <link href="http://git-patrickliu.github.io/2015/12/13/float-calculation/"/>
    <id>http://git-patrickliu.github.io/2015/12/13/float-calculation/</id>
    <published>2015-12-13T10:37:29.000Z</published>
    <updated>2017-04-03T01:09:18.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://ppt.dapenggaofei.com/md/float.md" target="_blank" rel="external">查看ppt</a></p>
<p>话说某天一个同事问我，为啥在JS里面 <strong>0.2+0.4</strong>，结果不是<strong>0.6</strong>。我想这个问题随便问一个人，都可以得出结果就是<strong>0.6</strong>， 而JS计算之后的结果是：</p>
<p><img src="http://onlineimages.dapenggaofei.com/ff2efb5a2f58b399125a02c805e3b560.png" alt="0.2+0.4 result"></p>
<p>下面我们来回忆一下学习过的计算机组成原理相关的知识。一步一步来揭示这个问题的真相。</p>
<h3 id="浮点数的表示">浮点数的表示</h3><p>先介绍一下在计算机中表示数字的三种表示方法：<a href="http://baike.baidu.com/view/60480.htm" target="_blank" rel="external">原码</a>，<a href="http://baike.baidu.com/view/742694.htm" target="_blank" rel="external">反码</a>和<a href="http://baike.baidu.com/link?url=OeFyHF5lRc_3X8oaLrMYQZIJwtgbSlbq4u5fgXwWvYmUl8DY6LARZ0NvnxJakDjN8HFqtjoHXz0pSWVvkE_OPa" target="_blank" rel="external">补码</a></p>
<h4 id="1-_原码">1. 原码</h4><p>原码是计算机中对数字的二进制的定点表示方法。</p>
<p>优点是简单直观。最高位表示符号位。例如我们用8位二进制来表示一个数。</p>
<blockquote>
<p>+11的原码为<code>0</code>0001011，-11的原码就是<code>1</code>00001011。</p>
</blockquote>
<p>缺点是不能直接参与运算，可能会出错。例如数学上，1+(-1)=0，但在二进制当中00000001+10000001=10000010，换自成十进制就是-2，结果显示是错误的。所以原码的符号位不能直接参与运算，必须和其他位分开，这就增加了实现的硬件开稍和复杂性。</p>
<p>用于表示整数的原码，如果不满位长，如8，则在高位和符号位间添加0，补全。</p>
<blockquote>
<p>如前面的11的例子。如小数，则在最低位往后补0。如0.375的原码二制度为0.011<code>0000</code>。后四位为补全8位的码。</p>
</blockquote>
<p>Q1: -12.875的原码表示为？<br>Q2: 8位有符号原码，可表示的数值范围是？</p>
<h4 id="2-_反码">2. 反码</h4><p>正数的反码与其原码相同。<br>负数的反码，符号位为<code>1</code>, 数值部位按原码取反。</p>
<blockquote>
<p>例如：<br>[+7]原=00000111<br>[+7]反=00000111<br>[-7]原=10000111<br>[-7]反=11111000</p>
</blockquote>
<p>Q3: 8位有符号的反码，可表示的数值范围是？</p>
<h4 id="3-_补码">3. 补码</h4><p>正数的补码和其原码相同。<br>负数的补码，为其反码+1。</p>
<blockquote>
<p>例如：<br>[+7]原=00000111<br>[+7]反=00000111<br>[+7]补=00000111<br>[-7]原=10000111<br>[-7]反=11111000<br>[-7]补=11111001</p>
</blockquote>
<p>Q4: 8位有符号的补码，可表示的数值范围是？</p>
<h4 id="溢出">溢出</h4><p>(+72) + (+98) = ?? （8位有符号数）</p>
<h4 id="浮点数表示方法">浮点数表示方法</h4><p>根据国际标准 <em>IEEE 754</em>，任意一个二进制浮点数V可以表示成下面的形式。</p>
<blockquote>
<p><img src="http://7xlxn1.com1.z0.glb.clouddn.com/74fce14dc02783bde16b5d38fa92babd.png" alt="IEEE754"></p>
<ol>
<li>(-1)^s表示符号位，当s=0，V为正数；当s=1，V为负数。</li>
<li>M表示有效数字，大于等于1，小于2。</li>
<li>2^E表示指数位。</li>
</ol>
</blockquote>
<p>举例来说，十进制的5.0，写成二进制就是101.0，相当于1.01*2^2。那么，按照上述公式，可以得出s=0, M=1.01, E=2。</p>
<p>十进制的-5.0，写成二进制就是-101.0，相当于-1.01*2^2。那么s=1, M=1.01, E=2。</p>
<p><em>IEEE 754</em> 规定，对于32位的浮点数，最高1位是符号位s, 接着的8位是指数E，剩下的23位是有效数字M。对于64位的浮点数，最高1位是符号位s，接着的11位是指数E，剩下的52位为有效数字M。</p>
<p><em>IEEE 754</em> 对有效数字M和指数E，还有一些特别规定。</p>
<blockquote>
<p>前面说过，1&lt;=M&lt;2，也就是说M可以写成1.xxxxxx的形式，其中xxxxxx表示小数部分。<em>IEEE 754</em>规定，在计算机内部保存M时，默认这个数的第一位总是1，因此可以被舍去，只保存后面的xxxxx部分，比如保存1.01的时候，只保存01，等到读取的时候，再把第一位的1加上去，这样的目的，是节省了1位有效数字。</p>
</blockquote>
<p>至于指数E，情况就比较复杂。</p>
<blockquote>
<p>首先，E为一个无符号的整数。这意味着，如果E为8位，它的取值范围为0～255，如果E为11位，它的取值范围为0～2047。但是，我们知道，科学计数法中的E是可以出现负数的，所以<em>IEEE 754</em>规定，E的真实值必须再减去一个中间数，对于8位的E，这个中间数就是127，对于11位的E，这个中间数就是1023。</p>
</blockquote>
<p>比如，2^10的E是10，所以保存成32位浮点数时，必须保存为10+127=137，即10001001。</p>
<p>然后，指数E还可以再分成三种情况：</p>
<blockquote>
<p>(1) E不全为0或不全为1。这时，浮点数就采用上面的规则表示，即指数E的计算值减去127，得到真实值，再将有效数字M前加上第一位的1。<br>(2) E全为0。这时浮点数的指数E等于1-127，有效数字M不再加上第一位的1，而是还原为0.xxxxxx的小数，这样做是为了表示+-0，以及接近于0的很小的数字。<br>(3) E全为1。这时如果有效数字M全为0，表示+-无穷大。如果有效数字M不全为0，表示这个数不是一个数(NaN)。</p>
</blockquote>
<h4 id="浮点数的加法">浮点数的加法</h4><p>浮点数的加法的计算，需要进行以下5步。<br>一、 对阶</p>
<blockquote>
<p>使两数的小数点位置对齐，小的阶码向大的阶码看齐。</p>
</blockquote>
<pre><code>所谓对阶是指将两个进行运算的浮点数的阶码对齐的操作。对阶的目的是为使两个浮点数的尾数能够进行加减运算。因为，当进行Mx·<span class="number">2</span>Ex与My·<span class="number">2</span>Ey加减运算时，只有使两浮点数的指数值部分相同，才能将相同的指数值作为公因数提出来，然后进行尾数的加减运算。    对阶的具体方法是：首先求出两浮点数阶码的差，即⊿E＝Ex-Ey，将小阶码加上⊿E，使之与大阶码相等，同时将小阶码对应的浮点数的尾数右移相应位数，以保证该浮点数的值不变。

几点注意:
<span class="number">1.</span> 对阶的原则是小阶对大阶，之所以这样做是因为若大阶对小阶，则尾数的数值部分的高位需移出，而小阶对大阶移出的是尾数的数值部分的低位，这样损失的精度更小。
<span class="number">2.</span> 若⊿E＝<span class="number">0</span>，说明两浮点数的阶码已经相同，无需再做对阶操作了。
<span class="number">3.</span> 采用补码表示的尾数右移时，符号位保持不变。
<span class="number">4.</span> 由于尾数右移时是将最低位移出，会损失一定的精度，为减少误差，可先保留若干移出的位，供以后舍入处理用。
</code></pre><p>二、尾数求和</p>
<blockquote>
<p>尾数运算就是进行完成对阶后的尾数相加减。这里采用的就是我们前面讲过的纯小数的定点数加减运算。</p>
</blockquote>
<p>三、规格化</p>
<p>在机器中，为保证浮点数表示的唯一性，浮点数在机器中都是以规格化形式存储的。对于IEEE754标准的浮点数来说，就是尾数必须是1.M的形式。由于在进行上述两个定点小数的尾数相加减运算后，尾数有可能是非规格化形式，为此必须进行规格化操作。</p>
<p>规格化操作包括左规和右规两种情况。    左规操作：将尾数左移，同时阶码减值，直至尾数成为1.M的形式。例如，浮点数0.0011·25是非规格化的形式，需进行左规操作，将其尾数左移3位，同时阶码减3，就变成1.1100·22规格化形式了。    右规操作：将尾数右移1位，同时阶码增1，便成为规格化的形式了。要注意的是，右规操作只需将尾数右移一位即可，这种情况出现在尾数的最高位（小数点前一位）运算时出现了进位，使尾数成为10.xxxx或11.xxxx的形式。例如，10.0011·25右规一位后便成为1.00011·26的规格化形式了。</p>
<p>四、舍入</p>
<p>浮点运算在对阶或右规时，尾数需要右移，被右移出去的位会被丢掉，从而造成运算结果精度的损失。为了减少这种精度损失，可以将一定位数的移出位先保留起来，称为保护位，在规格化后用于舍入处理。   IEEE754标准列出了四种可选的舍入处理方法：   </p>
<ol>
<li>就近舍入（round to nearest） 这是标准列出的默认舍入方式，其含义相当于我们日常所说的“四舍五入”。例如，对于32位单精度浮点数来说，若超出可保存的23位的多余位大于等于100…01，则多余位的值超过了最低可表示位值的一半，这种情况下，舍入的方法是在尾数的最低有效位上加1；若多余位小于等于011…11，则直接舍去；若多余位为100…00，此时再判断尾数的最低有效位的值，若为0则直接舍去，若为1则再加1。   </li>
<li>朝+∞舍入（round toward +∞） 对正数来说，只要多余位不为全0，则向尾数最低有效位进1；对负数来说，则是简单地舍去。   </li>
<li>朝-∞舍入（round toward -∞） 与朝+∞舍入方法正好相反，对正数来说，只是简单地舍去；对负数来说，只要多余位不为全0，则向尾数最低有效位进1。  </li>
<li>朝0舍入（round toward 0）    即简单地截断舍去，而不管多余位是什么值。这种方法实现简单，但容易形成累积误差，且舍入处理后的值总是向下偏差。</li>
</ol>
<p>五. 判断结果<br>与定点数运算不同的是，浮点数的溢出是以其运算结果的阶码的值是否产生溢出来判断的。若阶码的值超过了阶码所能表示的最大正数，则为上溢，进一步，若此时浮点数为正数，则为正上溢，记为+∞，若浮点数为负数，则为负上溢，记为-∞；若阶码的值超过了阶码所能表示的最小负数，则为下溢，进一步，若此时浮点数为正数，则为正下溢，若浮点数为负数，则为负下溢。正下溢和负下溢都作为0处理。</p>
<h4 id="尝试解释一下下面的结果，然后在console当中试试">尝试解释一下下面的结果，然后在console当中试试</h4><p><code>0.7+0.2</code> = <code>?</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://ppt.dapenggaofei.com/md/float.md" target="_blank" rel="external">查看ppt</a></p>
<p>话说某天一个同事问我，为啥在JS里面 <strong>0.2+0.4</str]]>
    </summary>
    
      <category term="js float" scheme="http://git-patrickliu.github.io/tags/js-float/"/>
    
      <category term="js 浮点数计算" scheme="http://git-patrickliu.github.io/tags/js-%E6%B5%AE%E7%82%B9%E6%95%B0%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何科学上网]]></title>
    <link href="http://git-patrickliu.github.io/2015/10/06/fuxx-gfw/"/>
    <id>http://git-patrickliu.github.io/2015/10/06/fuxx-gfw/</id>
    <published>2015-10-05T23:09:45.000Z</published>
    <updated>2015-10-06T13:16:46.000Z</updated>
    <content type="html"><![CDATA[<p><code>科学上网</code>，真是具有中国特色的一个词汇。德先生我们需要关注，但是赛先生我们更加需要关注。<br>下面介绍一些技术来让大家自由地和国外的赛先生交流。</p>
<p>想自搭科学上网工具的同学，需要准备以下几个<code>硬</code>作案工具。</p>
<ol>
<li>国外VPS（如linode）[必选]</li>
<li>国内中转VPS（如腾讯云，阿里云等）[可选]</li>
</ol>
<p>如果不需要将socks5转为http请求的话，就不需要国内中转VPS。</p>
<h3 id="国外VPS配置[必选]">国外VPS配置[必选]</h3><p>国外VPS当然可以自由访问国外任何资源。我们要在国外VPS上安装一个Shadowsocks的server端。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure></p>
<p>pip是安装python的一个命令。如何安装<code>pip</code>，大家可以百度一下。</p>
<p>在安装完<code>shadowsocks</code>之后，大家启动shadowsocks的server端。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssserver -p [your-port] -k [your-password] -m rc4-md5 -d start</span><br></pre></td></tr></table></figure></p>
<p>上面中的[your-port]，[your-password] 大家可以替换成想要的端口号和自定义的密码。后面的rc4-md5，大家可以用这个加密方式，也可以替换成其他的。但是一定要和后面安装的<code>shadowsocks</code>的客户端的加密方式一致。</p>
<h3 id="国内VPS配置[可选]">国内VPS配置[可选]</h3><p>选配一个国内VPS的作用，就是在国内VPS上安装一个<code>shadowsocks</code>的客户端，并且使用<code>privoxy</code>将socks5转为http协议。这样我们在电脑或手机上使用起来就更加方便了。</p>
<h4 id="1-_安装shadowsocks_local">1. 安装shadowsocks local</h4><p>同样使用<code>pip</code> 来安装pip。然后再install <code>shadowsocks</code>。不过local的启动方式和server是不一样的。</p>
<p>配置一个本地的config.json（如果直拷的话，注释需要去掉）<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        "server": "[server-ip]", // 第1步当中的server-ip</span><br><span class="line">        "server_port": [server-port], // 第1步当中的server-port</span><br><span class="line">        "local_address":"127.0.0.1", //本地映射IP</span><br><span class="line">        "local_port":1080, // 本地映射IP,可填其他值</span><br><span class="line">        "password":"[server-ssserver-password]",// 第1步当中的password</span><br><span class="line">        "timeout":300,</span><br><span class="line">        "method":"rc4-md5", // 第1步当中的设置的加密方式</span><br><span class="line">        "fast_open":false,</span><br><span class="line">        "workers":1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后使用sslocal来启动。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sslocal config.json</span><br></pre></td></tr></table></figure></p>
<p>这样就完成了一个<code>sslocal</code>的启动。</p>
<h4 id="2-_安装privoxy">2. 安装privoxy</h4><p>这一步，我们继续在国内VPS中进行配置，通过privoxy将socks5转成http协议。大家先安装privoxy。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install privoxy // in CentOS</span><br></pre></td></tr></table></figure></p>
<p>在安装完<code>privoxy</code>之后，我们编辑<code>/etc/privoxy/config</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">user-manual /usr/share/doc/privoxy/user-manual</span><br><span class="line">confdir /etc/privoxy</span><br><span class="line">logdir /var/log/privoxy</span><br><span class="line">actionsfile match-all.action</span><br><span class="line">actionsfile default.action</span><br><span class="line">actionsfile user.action</span><br><span class="line">filterfile default.filter</span><br><span class="line">filterfile user.filter</span><br><span class="line">logfile logfile</span><br><span class="line">listen-address  :8118  # 转成http之后的监听端口</span><br><span class="line">toggle  1</span><br><span class="line">enable-remote-toggle  0</span><br><span class="line">enable-remote-http-toggle  0</span><br><span class="line">enable-edit-actions 0</span><br><span class="line">enforce-blocks 0</span><br><span class="line">buffer-limit 4096</span><br><span class="line">forwarded-connect-retries  0</span><br><span class="line">accept-intercepted-requests 0</span><br><span class="line">allow-cgi-request-crunching 0</span><br><span class="line">split-large-forms 0</span><br><span class="line">keep-alive-timeout 5</span><br><span class="line">socket-timeout 300</span><br><span class="line">forward-socks5 / 127.0.0.1:1080 .    # 上面sslocal映射的端口</span><br></pre></td></tr></table></figure></p>
<p>然后使用<code>privoxy</code> 进行启动。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/privoxy --pidfile /var/run/privoxy.pid --user privoxy /etc/privoxy/config</span><br></pre></td></tr></table></figure></p>
<p>到此为止，就设置了一个国内IP:8118的http代理。只要在电脑当中进行设置就可以进行代理了。再编辑一个pac就可以在手机WIFI网络下进行代理上网了。如何使用pac进行代理，大家可以进行搜索。</p>
<h3 id="无国内VPS，直连方案">无国内VPS，直连方案</h3><p>要是没有国内VPS，就需要在本地安装shadowsocks了。可以参考 <a href="http://www.jianshu.com/p/8ca5501ce556" target="_blank" rel="external">这里</a>。</p>
<h3 id="进阶">进阶</h3><p>上面实现了PC端，手机WIFI端的设置。如果需要在手机蜂窝网络下配置的话，需要使用<code>APN</code>技术。</p>
<p>大家下载<a href="https://support.apple.com/kb/DL1081?locale=zh_CN&amp;viewlocale=zh_CN" target="_blank" rel="external">iPhone配置工具</a>，并且按照中国移动此链接 <a href="http://www.sn.10086.cn/iphone/y12.html" target="_blank" rel="external">http://www.sn.10086.cn/iphone/y12.html</a> 进行配置。需要将其IP和端口，换成第二步中设置的IP:port。就可以实现蜂窝网络下的<code>APN</code>配置。</p>
<h2 id="参考链接">参考链接</h2><p><a href="http://tingxueren.com/blog/2014/01/10/jian-yi-http-proxy-da-jian/" target="_blank" rel="external">http://tingxueren.com/blog/2014/01/10/jian-yi-http-proxy-da-jian/</a></p>
<p><a href="http://www.jianshu.com/p/8ca5501ce556" target="_blank" rel="external">http://www.jianshu.com/p/8ca5501ce556</a></p>
<p><a href="https://www.v2ex.com/t/220006" target="_blank" rel="external">https://www.v2ex.com/t/220006</a></p>
<p><a href="http://www.sn.10086.cn/iphone/y12.html" target="_blank" rel="external">http://www.sn.10086.cn/iphone/y12.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><code>科学上网</code>，真是具有中国特色的一个词汇。德先生我们需要关注，但是赛先生我们更加需要关注。<br>下面介绍一些技术来让大家自由地和国外的赛先生交流。</p>
<p>想自搭科学上网工具的同学，需要准备以下几个<code>硬</code>作案工具。</p>]]>
    </summary>
    
      <category term="APN" scheme="http://git-patrickliu.github.io/tags/APN/"/>
    
      <category term="科学上网" scheme="http://git-patrickliu.github.io/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[七牛base64上传以及远程上传API]]></title>
    <link href="http://git-patrickliu.github.io/2015/09/27/qiniu-remote-upload-api/"/>
    <id>http://git-patrickliu.github.io/2015/09/27/qiniu-remote-upload-api/</id>
    <published>2015-09-27T08:03:10.000Z</published>
    <updated>2015-09-29T06:50:25.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://blog.dapenggaofei.com/2015/09/17/qiniu-add-to-favourite/" target="_blank" rel="external">上一篇</a> 文章我们讲到了利用七牛API来实现直接在网页上爬图的功能。主要是用到了下面两个API，在官方文档也找了大半天，没找到一个真正能用的例子，这里就将官方例子丰富一下，以便下次使用的时候能查到。</p>
<h3 id="1-_base64上传">1. base64上传</h3><p>刚开始有做这个chrome扩展的时候，最初就是想着七牛有没有提供base64上传的功能。这样的话，就可以直接将这个功能搞定了，现在想想当时还是太naive。在七牛文档也没搜到base64上传的API，倒是直接在百度搜索的时候搜到了。<a href="http://kb.qiniu.com/5rroxdgb" target="_blank" rel="external">前往七牛查看API</a>。发现竟然在知识库，而不在开发者文档专区，也是奇怪。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">putb64</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> pic = <span class="string">"填写你的base64后的字符串"</span>; <span class="comment">// 这里有一个坑，请除去MIME和base64以及逗号</span></span><br><span class="line">    <span class="keyword">var</span> url = <span class="string">"http://up.qiniu.com/putb64/20264"</span>; <span class="comment">//如果不想计算文件大小，可以改成http://up.qiniu.com/putb64/-1</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.readyState==<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xhr.responseText;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.open(<span class="string">"POST"</span>, url, <span class="literal">true</span>);</span><br><span class="line">    xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/octet-stream"</span>);</span><br><span class="line">    xhr.setRequestHeader(<span class="string">"Authorization"</span>, <span class="string">"UpToken  填写你从服务端获取的上传token"</span>); <span class="comment">//UpToken其实有挺多问题</span></span><br><span class="line">    xhr.send(pic);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面是官方给的JS示例，注释是我加的。有着以下几个问题：</p>
<ol>
<li><p>传的pic的值，一定要是base64之后去掉MIME前面几个字符，以及base64加逗号那几个字符才是正常传的值。<br><img src="http://7xkybo.com1.z0.glb.clouddn.com/qiniu-remote-upload-1.png?v=1" alt="base64字符串"></p>
</li>
<li><p>如果不想算大小的话，比如我，直接在url当中改成-1。</p>
</li>
<li>重点来了，UpToken，其算法在<a href="http://developer.qiniu.com/docs/v6/api/reference/security/put-policy.html" target="_blank" rel="external">官网</a>写得非常清楚 ，但是呢，我一直在scope里面传<code>&lt;bucket&gt;:&lt;key&gt;</code>，一直是返回401，说是授权不合法。后来尝试了一下scope只传<code>&lt;bucket&gt;</code>，但是在saveKey当中传想要的key值，才能授权正常，也是醉了。</li>
</ol>
<p>核心代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> genUpToken = <span class="function"><span class="keyword">function</span>(<span class="params">accessKey, secretKey, putPolicy</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//SETP 2</span></span><br><span class="line">                <span class="keyword">var</span> put_policy = <span class="built_in">JSON</span>.stringify(putPolicy);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//SETP 3</span></span><br><span class="line">                <span class="keyword">var</span> encoded = base64encode(utf16to8(put_policy));</span><br><span class="line"></span><br><span class="line">                <span class="comment">//SETP 4</span></span><br><span class="line">                <span class="keyword">var</span> hash = CryptoJS.HmacSHA1(encoded, secretKey);</span><br><span class="line">                <span class="keyword">var</span> encoded_signed = hash.toString(CryptoJS.enc.Base64);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//SETP 5</span></span><br><span class="line">                <span class="keyword">var</span> upload_token = accessKey + <span class="string">":"</span> + safe64(encoded_signed) + <span class="string">":"</span> + encoded;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> upload_token;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> upToken =</span><br><span class="line">                    genUpToken(</span><br><span class="line">                        YOUR-ACCESS-KEY,</span><br><span class="line">                        YOUR-SECRET-KEY,</span><br><span class="line">                        &#123;</span><br><span class="line">                            scope: YOUR-BUCKET,</span><br><span class="line">                            deadline: <span class="built_in">parseInt</span>(<span class="keyword">new</span> <span class="built_in">Date</span>()/<span class="number">1000</span>, <span class="number">10</span>) + <span class="number">3600</span>, <span class="comment">// 1小时有效期</span></span><br><span class="line">                            saveKey: YOUR-FILENAME</span><br><span class="line">                        &#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="2-_远程上传">2. 远程上传</h3><p>我以为用base64就已经没问题了（通过Canvas在线将图片转在base64），但是在百度爬图的时候，却出现了下面的这个安全错误。</p>
<blockquote>
<p>SecurityError: Failed to execute ‘toDataURL’ on ‘HTMLCanvasElement’: Tainted canvases may not be exported.</p>
</blockquote>
<p>网上查了一下，如果图片没有设置<code>access-control-allow-origin</code>，则使用Canvas是不能将其转为base64的。看来单纯用base64解决不了此种情况了，那么便有了下面这个方法。前往 <a href="http://developer.qiniu.com/docs/v6/api/reference/rs/fetch.html" target="_blank" rel="external">官方文档</a>。</p>
<p>官方文档其实也是有点坑人的。如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /fetch/<span class="xml"><span class="tag">&lt;<span class="title">EncodedURL</span>&gt;</span>/to/<span class="tag">&lt;<span class="title">EncodedEntryURI</span>&gt;</span> HTTP/1.1</span><br><span class="line">Host:           iovip.qbox.me</span><br><span class="line">Content-Type:   application/x-www-form-urlencoded</span><br><span class="line">Authorization:  QBox <span class="tag">&lt;<span class="title">AccessToken</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>这边<code>&lt;EncodedEntryURI&gt;</code>，官方中写着可以为<code>&lt;bucket&gt;:&lt;key&gt;</code>，也可以是<code>&lt;bucket&gt;</code>，其实后来我测下来，只能是<code>&lt;bucket&gt;:&lt;key&gt;</code>，要不然又是401授权失败…</p>
<p>完整代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">       <span class="keyword">var</span> genAccessToken = <span class="function"><span class="keyword">function</span>(<span class="params">accessKey, secretKey, bucket, srcUrl</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">var</span> signingStr = <span class="string">"/fetch/"</span> + safe_base64_encode(srcUrl) + <span class="string">"/to/"</span> + safe_base64_encode(bucket + <span class="string">':'</span> + YOUR-FILENAME) + <span class="string">'\n'</span>; <span class="comment">//记得加\n</span></span><br><span class="line"></span><br><span class="line">           <span class="keyword">var</span> hash = CryptoJS.HmacSHA1(signingStr, secretKey);</span><br><span class="line">           <span class="keyword">var</span> encoded_signed = hash.toString(CryptoJS.enc.Base64);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">var</span> accessToken = accessKey + <span class="string">":"</span> + safe64(encoded_signed);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> accessToken;</span><br><span class="line">       &#125;;</span><br><span class="line"><span class="keyword">var</span> accessToken =</span><br><span class="line">                   genAccessToken(</span><br><span class="line">                       YOUR-ACCESS-KEY,</span><br><span class="line">                       YOUR-SECRET-KEY,</span><br><span class="line">                       YOUR-BUCKET,</span><br><span class="line">                       IMAGE-URL</span><br><span class="line">                   );</span><br></pre></td></tr></table></figure></p>
<p>有兴趣可以去安装一下<a href="https://chrome.google.com/webstore/detail/ojgilmgaopbpimndoelnhacamaabdpni" target="_blank" rel="external">【七牛在线存图】</a>，体验一下在线爬图片的感觉，再也不用担心美图溜走了。<a href="https://github.com/git-patrickliu/QINIU-save-online-images" target="_blank" rel="external">github</a>里面有详细的上传代码。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://blog.dapenggaofei.com/2015/09/17/qiniu-add-to-favourite/" target="_blank" rel="external">上一篇</a> 文章我们讲到了利用七牛API来实现直接在网页上爬]]>
    </summary>
    
      <category term="chrome扩展" scheme="http://git-patrickliu.github.io/tags/chrome%E6%89%A9%E5%B1%95/"/>
    
      <category term="remote-upload" scheme="http://git-patrickliu.github.io/tags/remote-upload/"/>
    
      <category term="七牛" scheme="http://git-patrickliu.github.io/tags/%E4%B8%83%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OneAPM，just the one.]]></title>
    <link href="http://git-patrickliu.github.io/2015/09/04/access-in-oneapm/"/>
    <id>http://git-patrickliu.github.io/2015/09/04/access-in-oneapm/</id>
    <published>2015-09-04T14:07:51.000Z</published>
    <updated>2015-09-29T06:44:58.000Z</updated>
    <content type="html"><![CDATA[<p>先用一组数据来开始整篇文章吧。</p>
<ol>
<li>如果亚马逊页面加载每慢100ms，将影响他们1%的收入。</li>
<li>如果谷歌页面加载慢500ms，流量将锐减20%。来自 <a href="http://blog.gigaspaces.com/amazon-found-every-100ms-of-latency-cost-them-1-in-sales/" target="_blank" rel="external">gigaspaces</a></li>
</ol>
<p>这是一组08年的数据，而现在，页面延迟对公司来说影响会更大(虽然网络变快了很多，但是大家使用网络的习惯变化了，现在大家经常是用手机来接入网络，而移动网络是很不稳定的)。<br>页面加载速度，是如此的重要，所以我们就需要对前端页面加载速度进行不断的优化。这第一步自然就是获取用户的真实加载的情况，要不然只能闭门造车，纸上谈兵。</p>
<p>其实，我们在这第一步就受阻了。因为我们发现市面上并没有一款产品足够好用，能够让我们即时检测用户的页面加载情况。我们知道一些大公司是有相关的监控工具，但是没有对外开放。而如果公司内部自己开发的话，将是一个非常大的工程，并且统计出的结果未必精确，之后的维护也是很麻烦的一件事情。还好我们一直都有关注前端的一些技术会议。在报名<a href="velocity.oreilly.com.cn/2015/index.php">Velocity</a>的时候，我们认识了<a href="http://www.oneapm.com" target="_blank" rel="external">OneAPM</a>。</p>
<p>大家可以看看Velocity的赞助商们（不得不吐槽一下，这届Velocity，有一半都是赞助商们的广告），基本都是围绕着APM这个话题。我也趁机将他们中的绝大多数都试用了一下，最后选中了OneAPM作为我们暂时的前端加载速度监测工具。</p>
<p>OneAPM<a href="http://www.oneapm.com/bi/feature.html" target="_blank" rel="external">前端性能监控</a>都有一些什么特色，让我们最终选择了她呢？我总结了一下大概有以下几点：</p>
<h3 id="OneAPM_提供了两种前端监测代码注入方式。">OneAPM 提供了两种前端监测代码注入方式。</h3><p>一种是用户手动在html当中插入script，一种是通过用户部署后台agent自动插入script。</p>
<p>我想说，大家都习惯了用google分析，百度分析，腾讯分析等等，对在页面当中插入一段受信任方的JS并没有多大的反感。所以我开始试用就是采用了第一种方式，方便快捷，并且对代码影响是最小的。有某些APM工具，只支持上面的第二种，门槛略高，要想用一下还得改后台代码，还是挺麻烦了。</p>
<h3 id="OneAPM_提供了非常丰富的展现维度">OneAPM 提供了非常丰富的展现维度</h3><p>大家可以去<a href="http://www.oneapm.com" target="_blank" rel="external">OneAPM</a>上看一下，展现的<code>维度</code>是相当的丰富。</p>
<p><img src="http://7xkybo.com1.z0.glb.clouddn.com/oneapm1.png" alt="OneAPM sidebar "><br>OneAPM并不只是提供简单的浏览器performance的上报，而是对其进行了一定的归纳，将其归为，白屏时间、首屏时间、H5启动时间和网页就绪时间（这样挺好，但是我觉得如果也能同时展示出原始的performance信息，对专业调优的前端会更友好一些）。</p>
<p>还支持<code>浏览器</code>, <code>运营商</code>, <code>地理</code> 三个围度的加载情况查看。提供了慢事务追踪，静态文件加载瀑布流。</p>
<p><img src="http://7xkybo.com1.z0.glb.clouddn.com/oneapm2.png" alt="总览"><br><img src="http://7xkybo.com1.z0.glb.clouddn.com/oneapm3.png" alt="瀑布流"></p>
<p>其实上面2点，是我们最初想要的功能。能提供我们就已经很开心了。后面的几个额外功能更加让我们确信要使用OneAPM了。</p>
<h3 id="Ajax耗时功能">Ajax耗时功能</h3><p>这是一个非常好用的功能。相信后台艰苦卓绝的将后台CGI响应减少了10ms，但是前端一不小心就多了100ms，甚至大几百ms。所以前端AJAX测速同样是非常重要的。我们可以在这查看到哪一些CGI的速度慢，可以进行专项优化。<br><img src="http://7xkybo.com1.z0.glb.clouddn.com/oneapm4.png" alt="Ajax耗时检测"></p>
<h3 id="脚本错误功能">脚本错误功能</h3><p>这个功能不得不赞一下，因为他让我们发现了不少内嵌APP页面的错误。开发过mobile APP内嵌页的同学们都知道，移动端的调试非常麻烦，而移动端的错误就更加难以捕捉。有了这个功能，我们可以迅速知道我们线上页面的健康度（尤其是线上出现重大BUG，突发某一些错误时）。<br><img src="http://7xkybo.com1.z0.glb.clouddn.com/oneapm5.png" alt="脚本错误展示"></p>
<h3 id="HTTPS!!!">HTTPS!!!</h3><p>其实这个最重要。。因为如果不支持HTTPS的话，我们就直接bye bye走人了。因为我们的页面对安全要求比较高，是全站HTTPS的。而OneAPM是HTTP和HTTPS都支持的。<br><img src="http://7xkybo.com1.z0.glb.clouddn.com/oneapm6.png" alt="认准双斜杠"></p>
<h3 id="强大的技术支持">强大的技术支持</h3><p>我只是在试用阶段，北京的OneAPM同学就直接拉了一个群，非常热心地解决我的各种试用问题，和解答各种技术上的疑惑。企业产品和个人产品不一样，企业产品最重要的是要用得放心，舒心。对于我来说，OneAPM做到了。<br><img src="http://7xkybo.com1.z0.glb.clouddn.com/oneapm7.png" alt="技术支持"></p>
<p>综上，有了详细的用户加载时间，我们才能进行下一步的专项优化。</p>
<p>PS: 当然有要吐槽的：</p>
<ol>
<li>吞吐量的单位ppm，还是没有习惯，弄成PV是不是更好一些？</li>
<li>页面展示的维度，取path是不够的，这样容易让开发，测试和线上的数据混在一起（这个据说已在开发了，赞一记）。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>先用一组数据来开始整篇文章吧。</p>
<ol>
<li>如果亚马逊页面加载每慢100ms，将影响他们1%的收入。</li>
<li>如果谷歌页面加载慢500ms，流量将锐减20%。来自 <a href="http://blog.gigaspaces.com/amazon-]]>
    </summary>
    
      <category term="APM" scheme="http://git-patrickliu.github.io/tags/APM/"/>
    
      <category term="OneAPM" scheme="http://git-patrickliu.github.io/tags/OneAPM/"/>
    
      <category term="monitor" scheme="http://git-patrickliu.github.io/tags/monitor/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[接入多说评论]]></title>
    <link href="http://git-patrickliu.github.io/2015/09/04/duoshuo/"/>
    <id>http://git-patrickliu.github.io/2015/09/04/duoshuo/</id>
    <published>2015-09-04T09:22:16.000Z</published>
    <updated>2015-09-04T16:39:17.000Z</updated>
    <content type="html"><![CDATA[<p>我这个blog是基于<a href="http://hexo.io" target="_blank" rel="external">hexo</a>构建的，是纯静态html的。所以评论就是一个问题，在网上搜了一下发现<a href="http://dev.duoshuo.com/" target="_blank" rel="external">多说</a>，可以实现评论的功能。<br>多说是通过在你的页面当中内嵌一个多说的JS来实现评论的功能。所以我们需要将多说的JS内嵌到我们的hexo创建的博客当中。</p>
<h3 id="1-_多说添加网站">1. 多说添加网站</h3><p>当然，首先我们需要在多说添加一个网站，<a href="http://duoshuo.com/create-site/" target="_blank" rel="external">多说创建页面</a>，在此页面添加你自己的网站信息。</p>
<h3 id="2-_拷贝通用代码">2. 拷贝通用代码</h3><p>然后进入对应的管理后台，选择 <code>工具</code> – <code>获取代码</code> – <code>通用代码</code>, 然后可以查看到多说需要你在你的页面中插入的代码。</p>
<h3 id="3-_修改_config-yml">3. 修改_config.yml</h3><p>到hexo你的博客的根目录，在_config.yml里面新增一个变量，如duoshuo_shortname: your-short-name-in-duo-shuo。这个变量名是随便起的，但是要跟下一步对应起来。变量值，是你在第1步当中输入的多说域名。</p>
<h3 id="4-_修改主题中评论代码">4. 修改主题中评论代码</h3><p>到hexo当中找到你选用的themes的文件夹，比如我用的是light的主题，则在themes/light/layout/_partial/comment.ejs, 其实不同的主题，对应的文件是不一样的，这一步就需要大家稍微去看一下里面的代码。比如我这边light主题comment.ejs里面其实已经有light主题内置的facebook或disqus评论组件，然并卵，这是一个不存在的网站。<br>原始代码是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (page.comments)&#123; %&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">section</span> <span class="attribute">id</span>=<span class="value">"comment"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">h1</span> <span class="attribute">class</span>=<span class="value">"title"</span>&gt;</span><span class="tag">&lt;<span class="title">%=</span> <span class="attribute">__</span>('<span class="attribute">comment</span>') %&gt;</span><span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">%</span> <span class="attribute">if</span> (<span class="attribute">theme.comment_provider</span> =<span class="value">=</span> "<span class="attribute">facebook</span>") &#123;</span><br><span class="line">      <span class="attribute">if</span> (<span class="attribute">theme.facebook</span>) &#123; %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">%-</span> <span class="attribute">partial</span>('<span class="attribute">_partial</span>/<span class="attribute">facebook_comment</span>', &#123;<span class="attribute">fbConfig:</span> <span class="attribute">theme.facebook</span>&#125;) %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">%</span> &#125; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">%</span> &#125; <span class="attribute">else</span> <span class="attribute">if</span>(<span class="attribute">config.disqus_shortname</span>) &#123; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"disqus_thread"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">noscript</span>&gt;</span>Please enable JavaScript to view the <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"//disqus.com/?ref_noscript"</span>&gt;</span>comments powered by Disqus.<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">noscript</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">%</span> &#125; %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">%</span> &#125; %&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>在度娘搜示例的时候，里面出现的变量是post，如果二话不说，将代码直接替换，hexo编译的时候会出问题。如<a href="http://dev.duoshuo.com/threads/541d3b2b40b5abcd2e4df0e9" target="_blank" rel="external">多说官方</a>提供了这个示例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (!index &amp;&amp; post.comments &amp;&amp; config.duoshuo_shortname)&#123; %&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="title">section</span> <span class="attribute">id</span>=<span class="value">"comments"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多说评论框 start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"ds-thread"</span> <span class="attribute">data-thread-key</span>=<span class="value">"&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;"</span> <span class="attribute">data-title</span>=<span class="value">"&lt;%= post.title %&gt;"</span> <span class="attribute">data-url</span>=<span class="value">"&lt;%= page.permalink %&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多说评论框 end --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="keyword">var</span> duoshuoQuery = &#123;short_name:<span class="string">'&lt;%= config.duoshuo_shortname %&gt;'</span>&#125;;</span><br><span class="line">      (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ds = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">        ds.type = <span class="string">'text/javascript'</span>;ds.async = <span class="literal">true</span>;</span><br><span class="line">        ds.src = (<span class="built_in">document</span>.location.protocol == <span class="string">'https:'</span> ? <span class="string">'https:'</span> : <span class="string">'http:'</span>) + <span class="string">'//static.duoshuo.com/embed.js'</span>;</span><br><span class="line">        ds.charset = <span class="string">'UTF-8'</span>;</span><br><span class="line">        (<span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>]</span><br><span class="line">         || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]).appendChild(ds);</span><br><span class="line">      &#125;)();</span><br><span class="line">      </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多说公共JS代码 end --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">%</span> &#125; %&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>相信熟悉ejs模板语言的都清楚，如果调用comment.ejs的地方没有传入post参数，则在当前页面不能调用这个值。我们看一下发现在article.ejs当中有调用comment.ejs。最下面一行，<code>&lt;%- partial(&#39;comment&#39;) %&gt;</code>，在页面当中有传入item的值，并且我们简单看了一下item的一些属性值和post有点像，我们大胆地将最后一行改成<code>&lt;%- partial(&#39;comment&#39;, { post: item }) %&gt;</code>，然后运行一下<code>hexo g</code>，发现可行。这样就改好了。</p>
<p>其实对于其他类型的themes其实也是一样的。看一下代码改改变量就ok了。<br>按照之上几步就可以在hexo博客当中插入多说评论。大家有问题欢迎评论。谢谢：)。</p>
<h3 id="参考">参考</h3><ol>
<li>更多的信息请查看 <a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">http://ibruce.info/2013/11/22/hexo-your-blog/</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>我这个blog是基于<a href="http://hexo.io" target="_blank" rel="external">hexo</a>构建的，是纯静态html的。所以评论就是一个问题，在网上搜了一下发现<a href="http://dev.duoshuo.c]]>
    </summary>
    
      <category term="多说" scheme="http://git-patrickliu.github.io/tags/%E5%A4%9A%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[velocity-2015]]></title>
    <link href="http://git-patrickliu.github.io/2015/08/19/velocity-2015/"/>
    <id>http://git-patrickliu.github.io/2015/08/19/velocity-2015/</id>
    <published>2015-08-19T11:52:16.000Z</published>
    <updated>2017-04-03T02:11:46.000Z</updated>
    <content type="html"><![CDATA[<p>关键词：https优化，前端加载优化，hybrid，APM(application performance monitor）。</p>
<ol>
<li><p>https优化。</p>
<blockquote>
<ul>
<li>HttpDNS, 通过http方式向第三方的固定IP方式来获取指定域名的IP来进行<a href="这种方式可以解释我们之前域名被加黑名单的问题，但是如果又新增加域名，得客户端随时修改，建议通过下发方式来实现新域名prefetch。">DNS解析</a>（我们可以考虑在客户端新增HttpDNS）</li>
<li>启用[HSTS][^HSTS] （我们尚未全站启用https，所以这个不太好启动）</li>
<li>启用<a href="浏览器在下载服务端的证书之后会向证书发行商验证证书的合法性。因为是向国外网站验证，所以速度慢并存在着失败的可能性。所以可用的做法是在服务器端预先向服务器进行验证，然后打包证书供浏览器下载，这样浏览器就不用再去验证证书的合法性。注意，有效期大概为1个月。详见[网址](https://blog.xjpvictor.info/2013/09/nginx-ocsp-stapling/)。">OCSP Stapling</a>（可以采用，但需要查看兼容性以及要及时更新签名，以及注意证书链大小）</li>
<li>复用session，减少握手次数</li>
<li>精确设置TLS Record Size，size过小，overhead比重增大，size过大，单record的TCP分段过多</li>
<li>TLS硬件加速</li>
<li>SPDY/HTTP2.0，可以研究，但近期可能用不上。</li>
<li>配置Forward secrecy cipher 支持[False start][^falsestart]  （可以采用，省掉一个RTT时间）</li>
<li>升级openssl版本到最新（我们的版本是openssl-1.0.2c）</li>
<li>确认TLS压缩禁用（nginx 1.3.x以上版本都自动关闭，不关闭有漏洞，我们nginx是1.6.3）</li>
<li>确认SNI支持 （已支持，多个证书部署在同一个IP上）</li>
<li>使用 <strong>//</strong>，来引用静态资源文件，保证http能无缝迁到https环境（我们已经使用了，但是一个360的同僚说在某些地方的移动运营商会将<strong>//</strong> 篡改为 <strong>/</strong>。但是iPhone5s 上海中国移动未发现问题）。<br><img src="http://7xkybo.com1.z0.glb.clouddn.com/IMG_0612.JPG" alt="TLS总结"></li>
</ul>
</blockquote>
</li>
<li><p>页面直出方法，对比？</p>
<blockquote>
<ul>
<li>nginx + lua 页面直出（京东618采用）<br><img src="http://7xkybo.com1.z0.glb.clouddn.com/IMG_0571.JPG" alt="nginx + lua"></li>
<li>ATS （apache traffic server）页面直出（Yahoo采用）</li>
<li>nodejs直出</li>
</ul>
</blockquote>
</li>
<li><p>前端加载优化</p>
<blockquote>
<ul>
<li>ebay优化尝试：DSA（dynamic site accelerate）动态加速，加快页面加载，采用WebP格式优化图片大小（理论能优化到以前60%大小）。</li>
<li>composition layer，z-index相同导致的渲染变慢（阿里分享），可查看 <a href="http://www.w3ctech.com/topic/1463" target="_blank" rel="external">css conf</a> 360的分享有讨论此问题。</li>
</ul>
</blockquote>
</li>
<li><p>hybrid</p>
<blockquote>
<ul>
<li>百度 Blend UI系统架构。通过封装统一JS UI API，如果是在百度app内部的webview，则调用的是原生的UI样式，否则调用的是JS统一的<a href="百度blendUI详细如下：">UI样式</a></li>
<li>Yahoo 采用reactjs + <a href="https://facebook.github.io/flux/" target="_blank" rel="external">flux</a></li>
</ul>
</blockquote>
</li>
</ol>
<ol>
<li>APM<blockquote>
<ul>
<li>今年的趋势是APM（application performance monitor），赞助商基本都是APM厂商（云智慧，性能魔方，性能极客，OneAPM，野狗等）。</li>
<li>我们正在试用<a href="https://tpm.oneapm.com/tpm/account/717715137/browser/1326753/overview/#/" target="_blank" rel="external">OneAPM</a>进行页面加载测试。</li>
</ul>
</blockquote>
</li>
</ol>
<h4 id="总结：">总结：</h4><h5 id="一些方法论：">一些方法论：</h5><blockquote>
<ul>
<li>保持simplicity<br><img src="http://7xkybo.com1.z0.glb.clouddn.com/IMG_0560.JPG" alt="保持简单"></li>
<li>build high performance team<br><img src="http://7xkybo.com1.z0.glb.clouddn.com/IMG_0585.JPG" alt="high performance team"></li>
<li>优化问题方法论<br><img src="http://7xkybo.com1.z0.glb.clouddn.com/IMG_0616.JPG" alt="优化步骤"></li>
</ul>
</blockquote>
<h5 id="我们暂时能够跟进的：">我们暂时能够跟进的：</h5><blockquote>
<ul>
<li>客户端采用http协议的httpDNS来加速DNS查询，能有效防止之前DNS解析问题。</li>
<li>https优化全部跟进，已将dev全部改成TLSv1.2，排期全部改造并上线。</li>
<li>CDN动态加速（DSA）咨询，并开启。</li>
<li>hybrid现阶段讨论结果是采用PhoneGap。</li>
<li>试用OneAPM跟进数据，然后基于数据进行优化。</li>
</ul>
</blockquote>
<h5 id="一些有用的网站分享：">一些有用的网站分享：</h5><ol>
<li><p>关于html标准的网站。</p>
<blockquote>
<ul>
<li><a href="http://specifiction.wicg.io" target="_blank" rel="external">specifiction</a>|<a href="http://discourse.wicg.io" target="_blank" rel="external">Discourse</a> ask question</li>
<li>Contribute tests on <a href="http://testthewebforward.org" target="_blank" rel="external">testthewebforward</a></li>
<li><a href="http://www.w3.org/community/wicg" target="_blank" rel="external">W3 Community</a></li>
<li><a href="http://extensiblewebmanifesto.org" target="_blank" rel="external">extensiblewebmanifesto</a></li>
<li><a href="http://webcomponents.org" target="_blank" rel="external">webcomponents</a></li>
</ul>
</blockquote>
</li>
<li><p><a href="https://ssllabs.com/" target="_blank" rel="external">SSLLabs</a> 查看你的网站https安不安全</p>
</li>
<li><a href="http://op.baidu.com/2015/04/https-s01a01/" target="_blank" rel="external">百度https实践</a></li>
</ol>
<p>[^HSTS]: HTTP Strict Transport Security。我们现在请求http的站点时，会自动跳转到https的页面，其实这一步是存在安全风险的，但是通过HSTS，设置响应头Strict-Transport-Security: max-age=31536000; includeSubDomains，可保证用户即使输入http页面，也在浏览器级别会自动请求https页面，不需要经过服务器跳转。</p>
<p>[^falsestart]: 查看<a href="http://chimera.labs.oreilly.com/books/1230000000545/ch04.html" target="_blank" rel="external">网址</a>，啥是false start（抢跑）。</p>
<p><img src="http://7xkybo.com1.z0.glb.clouddn.com/IMG_0593.JPG" alt="blend UI 1"><br><img src="http://7xkybo.com1.z0.glb.clouddn.com/IMG_0594.JPG" alt="blend UI 2"><br><img src="http://7xkybo.com1.z0.glb.clouddn.com/IMG_0595.JPG" alt="blend UI 3"><br><img src="http://7xkybo.com1.z0.glb.clouddn.com/IMG_0596.JPG" alt="blend UI 4"><br><img src="http://7xkybo.com1.z0.glb.clouddn.com/IMG_0597.JPG" alt="blend UI 5"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>关键词：https优化，前端加载优化，hybrid，APM(application performance monitor）。</p>
<ol>
<li><p>https优化。</p>
<blockquote>
<ul>
<li>HttpDNS, 通过http方式向第三方的]]>
    </summary>
    
      <category term="velocity" scheme="http://git-patrickliu.github.io/tags/velocity/"/>
    
  </entry>
  
</feed>
