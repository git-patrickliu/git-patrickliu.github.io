<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[patrickliu's blog]]></title>
  <subtitle><![CDATA[Hi, I'm 0827]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://git-patrickliu.github.io/"/>
  <updated>2016-06-10T23:32:39.000Z</updated>
  <id>http://git-patrickliu.github.io/</id>
  
  <author>
    <name><![CDATA[patrickliu]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[NGINX+LUA实现简单的灰度发布]]></title>
    <link href="http://git-patrickliu.github.io/2016/06/11/nginx-lua-gray-md/"/>
    <id>http://git-patrickliu.github.io/2016/06/11/nginx-lua-gray-md/</id>
    <published>2016-06-10T23:28:27.000Z</published>
    <updated>2016-06-10T23:32:39.000Z</updated>
    <content type="html"><![CDATA[<p>感谢国人agentzh，让我们能够以一种更加简单的方式来控制Nginx。即：使用脚本语言LUA来嵌入到Nginx当中来进行编程。</p>
<p>我们一期实现的灰度功能比较简单。原理是通过读取用户请求cookie(如uuid)是否在redis的白名单当中，来让用户定向到不同的Web后端机器。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- read cookie &amp; set to ctx.clientUID</span></span><br><span class="line"><span class="keyword">local</span> cookieName = ngx.ctx.cookieName</span><br><span class="line"><span class="keyword">local</span> ck = <span class="built_in">require</span> <span class="string">"resty.cookie"</span></span><br><span class="line"><span class="keyword">local</span> cookie, err = ck:new()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> cookie <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- new resty.cookie failed</span></span><br><span class="line">    ngx.log(ngx.ERR, <span class="string">"new cookie failed"</span>, err)</span><br><span class="line">    ngx.exec(<span class="string">"@defaultProxy"</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> field, err = cookie:get(cookieName)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> field <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- uid is nil</span></span><br><span class="line">    <span class="comment">-- set ngx.ctx.clientUID to nil</span></span><br><span class="line">    ngx.ctx.clientUID = <span class="keyword">nil</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment">-- uid is not nil</span></span><br><span class="line"><span class="comment">-- set ngx.ctx to field value</span></span><br><span class="line">    ngx.ctx.clientUID = field</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- query the clientUID in redis and decide which upstream to go</span></span><br><span class="line"><span class="keyword">local</span> clientUID = ngx.ctx.clientUID</span><br><span class="line"><span class="keyword">local</span> redisKey = ngx.ctx.redisKey</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> clientUID <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- directly upstream to online module</span></span><br><span class="line">    ngx.exec(<span class="string">"@defaultProxy"</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment">-- clientUID is not empty</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">putIntoPool</span> <span class="params">(redCon)</span></span></span><br><span class="line">        <span class="keyword">local</span> ok, err = redCon:set_keepalive(<span class="number">10000</span>, <span class="number">100</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span></span><br><span class="line">            ngx.log(ngx.ERR, <span class="string">"redis set keepalive failed"</span>, err)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">closeCon</span> <span class="params">(redCon)</span></span></span><br><span class="line">        <span class="keyword">local</span> ok, err = redCon:close()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span></span><br><span class="line">            ngx.log(ngx.ERR, <span class="string">"close redis connection failed"</span>, err)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- request redis</span></span><br><span class="line">    <span class="keyword">local</span> redis = <span class="built_in">require</span> <span class="string">"resty.redis"</span></span><br><span class="line">    <span class="keyword">local</span> red, err = redis:new()</span><br><span class="line">    red:set_timeout(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> red <span class="keyword">then</span></span><br><span class="line">       ngx.log(ngx.ERR, <span class="string">"new redis error"</span>, err)</span><br><span class="line">       ngx.exec(<span class="string">"@defaultProxy"</span>)</span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- redis config</span></span><br><span class="line">    <span class="keyword">local</span> redisIP = ngx.ctx.redisIP</span><br><span class="line">    <span class="keyword">local</span> redisPort = ngx.ctx.redisPort</span><br><span class="line">    <span class="keyword">local</span> ok, err = red:connect(redisIP, redisPort)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span></span><br><span class="line">       ngx.log(ngx.ERR, <span class="string">"connect redis error"</span>, err)</span><br><span class="line">       ngx.exec(<span class="string">"@defaultProxy"</span>)</span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">-- red:sismember(redisKey, clientUID)</span></span><br><span class="line">    <span class="comment">-- if return 1, upstream to gray</span></span><br><span class="line">    <span class="comment">-- else if return 0, upstream to online module</span></span><br><span class="line">    <span class="keyword">local</span> isGray, err = red:sismember(redisKey, clientUID)</span><br><span class="line">    <span class="keyword">if</span> isGray ~= <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">        <span class="comment">-- put into connection pool</span></span><br><span class="line">        putIntoPool(red)</span><br><span class="line"></span><br><span class="line">        <span class="comment">-- not in redis</span></span><br><span class="line">        <span class="keyword">if</span> isGray == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">            ngx.log(ngx.ERR, redisKey..<span class="string">" "</span>..clientUID..<span class="string">" is not in gray"</span>)</span><br><span class="line">            ngx.exec(<span class="string">"@defaultProxy"</span>)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ngx.log(ngx.ERR, <span class="string">" sismember error "</span>, err)</span><br><span class="line">            ngx.exec(<span class="string">"@defaultProxy"</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    ngx.log(ngx.ERR, redisKey..<span class="string">" "</span>..clientUID..<span class="string">" is in gray"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- put into connection pool</span></span><br><span class="line">    putIntoPool(red)</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- navigate to grayProxy</span></span><br><span class="line">    ngx.exec(<span class="string">"@grayProxy"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>感谢国人agentzh，让我们能够以一种更加简单的方式来控制Nginx。即：使用脚本语言LUA来嵌入到Nginx当中来进行编程。</p>
<p>我们一期实现的灰度功能比较简单。原理是通过读取用户请求cookie(如uuid)是否在redis的白名单当中，来让用户定向到不同的]]>
    </summary>
    
      <category term="LUA" scheme="http://git-patrickliu.github.io/tags/LUA/"/>
    
      <category term="NGINX" scheme="http://git-patrickliu.github.io/tags/NGINX/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[微信内嵌页返回键控制]]></title>
    <link href="http://git-patrickliu.github.io/2016/06/10/return-button-control/"/>
    <id>http://git-patrickliu.github.io/2016/06/10/return-button-control/</id>
    <published>2016-06-10T10:26:06.000Z</published>
    <updated>2016-06-10T23:31:00.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="微信内嵌页" scheme="http://git-patrickliu.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%86%85%E5%B5%8C%E9%A1%B5/"/>
    
      <category term="返回键控制" scheme="http://git-patrickliu.github.io/tags/%E8%BF%94%E5%9B%9E%E9%94%AE%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自适应雪碧图]]></title>
    <link href="http://git-patrickliu.github.io/2016/03/12/adaptive-sprite/"/>
    <id>http://git-patrickliu.github.io/2016/03/12/adaptive-sprite/</id>
    <published>2016-03-12T09:33:47.000Z</published>
    <updated>2016-03-12T09:35:45.000Z</updated>
    <content type="html"><![CDATA[<p>说起雪碧图，前端新老司机们应该都不陌生。通过将页面中琐碎的小图合成一张大图，可以减少页面请求数，加快页面加载速度。</p>
<p>但是对于自适应雪碧图，大家可能了解的不多。这里给大家介绍一种可以自适应的雪碧图，就是雪碧图里面的子图可以自适应不同大小的标签。<a href="https://jsfiddle.net/dapenggaofei/rjm4ykj2/" target="_blank" rel="external">狠狠点击查看效果</a>。</p>
<p>实现的原理其实也挺简单的，主要是应用了CSS3的 <strong>background-size</strong> 的属性。在用compass合并雪碧图之后，图片的background-position其实都已经算好了，将对应的class放置到我们的标签上，背景图片至少应该出现（或部分出现）在我们的标签之中，现在我们需要的就是通过background-size放大或缩小图片，将我们需要的背景图片放置在标签之中。</p>
<p>那是放大或缩小多少倍呢？下面我们可以看以下一个简略的推导过程（我们只推演宽度的情况，高度是同理的）。<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 假设合成之后的雪碧图宽是 W1, 需要显示的子图片宽度是 W2, 以子图为背景的标签宽度是 W3，background-size的宽度是x</span><br><span class="line"><span class="number">2.</span> 有公式 x/W3 = W1/W2 =&gt; x = W1*W3/W2</span><br><span class="line"><span class="number">3.</span> 所以 background-size 的宽度值为 W1*W3/W2</span><br></pre></td></tr></table></figure></p>
<p>经过上面算出来的background-size正好满足了让子图的正好出现在所需要的标签当中。标签宽度变化，只要更改background-size的值就可以了，而这一些都可以用compass去自动帮大家生成。从而实现了一个自适应的雪碧图。</p>
<p>大家可以去我的github上查看实现的compass的源代码和实例 (<a href="https://github.com/git-patrickliu/responsive-compass-sprite" target="_blank" rel="external">即刻前往</a>)。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>说起雪碧图，前端新老司机们应该都不陌生。通过将页面中琐碎的小图合成一张大图，可以减少页面请求数，加快页面加载速度。</p>
<p>但是对于自适应雪碧图，大家可能了解的不多。这里给大家介绍一种可以自适应的雪碧图，就是雪碧图里面的子图可以自适应不同大小的标签。<a href="]]>
    </summary>
    
      <category term="adaptive" scheme="http://git-patrickliu.github.io/tags/adaptive/"/>
    
      <category term="compass" scheme="http://git-patrickliu.github.io/tags/compass/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[float-division]]></title>
    <link href="http://git-patrickliu.github.io/2015/12/13/float-division/"/>
    <id>http://git-patrickliu.github.io/2015/12/13/float-division/</id>
    <published>2015-12-13T10:37:29.000Z</published>
    <updated>2015-12-13T10:38:42.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="js float division" scheme="http://git-patrickliu.github.io/tags/js-float-division/"/>
    
      <category term="js 浮点数除法" scheme="http://git-patrickliu.github.io/tags/js-%E6%B5%AE%E7%82%B9%E6%95%B0%E9%99%A4%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何科学上网]]></title>
    <link href="http://git-patrickliu.github.io/2015/10/06/fuxx-gfw/"/>
    <id>http://git-patrickliu.github.io/2015/10/06/fuxx-gfw/</id>
    <published>2015-10-05T23:09:45.000Z</published>
    <updated>2015-10-06T13:16:46.000Z</updated>
    <content type="html"><![CDATA[<p><code>科学上网</code>，真是具有中国特色的一个词汇。德先生我们需要关注，但是赛先生我们更加需要关注。<br>下面介绍一些技术来让大家自由地和国外的赛先生交流。</p>
<p>想自搭科学上网工具的同学，需要准备以下几个<code>硬</code>作案工具。</p>
<ol>
<li>国外VPS（如linode）[必选]</li>
<li>国内中转VPS（如腾讯云，阿里云等）[可选]</li>
</ol>
<p>如果不需要将socks5转为http请求的话，就不需要国内中转VPS。</p>
<h3 id="国外VPS配置[必选]">国外VPS配置[必选]</h3><p>国外VPS当然可以自由访问国外任何资源。我们要在国外VPS上安装一个Shadowsocks的server端。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure></p>
<p>pip是安装python的一个命令。如何安装<code>pip</code>，大家可以百度一下。</p>
<p>在安装完<code>shadowsocks</code>之后，大家启动shadowsocks的server端。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssserver -p [your-port] -k [your-password] -m rc4-md5 -d start</span><br></pre></td></tr></table></figure></p>
<p>上面中的[your-port]，[your-password] 大家可以替换成想要的端口号和自定义的密码。后面的rc4-md5，大家可以用这个加密方式，也可以替换成其他的。但是一定要和后面安装的<code>shadowsocks</code>的客户端的加密方式一致。</p>
<h3 id="国内VPS配置[可选]">国内VPS配置[可选]</h3><p>选配一个国内VPS的作用，就是在国内VPS上安装一个<code>shadowsocks</code>的客户端，并且使用<code>privoxy</code>将socks5转为http协议。这样我们在电脑或手机上使用起来就更加方便了。</p>
<h4 id="1-_安装shadowsocks_local">1. 安装shadowsocks local</h4><p>同样使用<code>pip</code> 来安装pip。然后再install <code>shadowsocks</code>。不过local的启动方式和server是不一样的。</p>
<p>配置一个本地的config.json（如果直拷的话，注释需要去掉）<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        "server": "[server-ip]", // 第1步当中的server-ip</span><br><span class="line">        "server_port": [server-port], // 第1步当中的server-port</span><br><span class="line">        "local_address":"127.0.0.1", //本地映射IP</span><br><span class="line">        "local_port":1080, // 本地映射IP,可填其他值</span><br><span class="line">        "password":"[server-ssserver-password]",// 第1步当中的password</span><br><span class="line">        "timeout":300,</span><br><span class="line">        "method":"rc4-md5", // 第1步当中的设置的加密方式</span><br><span class="line">        "fast_open":false,</span><br><span class="line">        "workers":1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后使用sslocal来启动。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sslocal config.json</span><br></pre></td></tr></table></figure></p>
<p>这样就完成了一个<code>sslocal</code>的启动。</p>
<h4 id="2-_安装privoxy">2. 安装privoxy</h4><p>这一步，我们继续在国内VPS中进行配置，通过privoxy将socks5转成http协议。大家先安装privoxy。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install privoxy // in CentOS</span><br></pre></td></tr></table></figure></p>
<p>在安装完<code>privoxy</code>之后，我们编辑<code>/etc/privoxy/config</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">user-manual /usr/share/doc/privoxy/user-manual</span><br><span class="line">confdir /etc/privoxy</span><br><span class="line">logdir /var/log/privoxy</span><br><span class="line">actionsfile match-all.action</span><br><span class="line">actionsfile default.action</span><br><span class="line">actionsfile user.action</span><br><span class="line">filterfile default.filter</span><br><span class="line">filterfile user.filter</span><br><span class="line">logfile logfile</span><br><span class="line">listen-address  :8118  # 转成http之后的监听端口</span><br><span class="line">toggle  1</span><br><span class="line">enable-remote-toggle  0</span><br><span class="line">enable-remote-http-toggle  0</span><br><span class="line">enable-edit-actions 0</span><br><span class="line">enforce-blocks 0</span><br><span class="line">buffer-limit 4096</span><br><span class="line">forwarded-connect-retries  0</span><br><span class="line">accept-intercepted-requests 0</span><br><span class="line">allow-cgi-request-crunching 0</span><br><span class="line">split-large-forms 0</span><br><span class="line">keep-alive-timeout 5</span><br><span class="line">socket-timeout 300</span><br><span class="line">forward-socks5 / 127.0.0.1:1080 .    # 上面sslocal映射的端口</span><br></pre></td></tr></table></figure></p>
<p>然后使用<code>privoxy</code> 进行启动。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/privoxy --pidfile /var/run/privoxy.pid --user privoxy /etc/privoxy/config</span><br></pre></td></tr></table></figure></p>
<p>到此为止，就设置了一个国内IP:8118的http代理。只要在电脑当中进行设置就可以进行代理了。再编辑一个pac就可以在手机WIFI网络下进行代理上网了。如何使用pac进行代理，大家可以进行搜索。</p>
<h3 id="无国内VPS，直连方案">无国内VPS，直连方案</h3><p>要是没有国内VPS，就需要在本地安装shadowsocks了。可以参考 <a href="http://www.jianshu.com/p/8ca5501ce556" target="_blank" rel="external">这里</a>。</p>
<h3 id="进阶">进阶</h3><p>上面实现了PC端，手机WIFI端的设置。如果需要在手机蜂窝网络下配置的话，需要使用<code>APN</code>技术。</p>
<p>大家下载<a href="https://support.apple.com/kb/DL1081?locale=zh_CN&amp;viewlocale=zh_CN" target="_blank" rel="external">iPhone配置工具</a>，并且按照中国移动此链接 <a href="http://www.sn.10086.cn/iphone/y12.html" target="_blank" rel="external">http://www.sn.10086.cn/iphone/y12.html</a> 进行配置。需要将其IP和端口，换成第二步中设置的IP:port。就可以实现蜂窝网络下的<code>APN</code>配置。</p>
<h2 id="参考链接">参考链接</h2><p><a href="http://tingxueren.com/blog/2014/01/10/jian-yi-http-proxy-da-jian/" target="_blank" rel="external">http://tingxueren.com/blog/2014/01/10/jian-yi-http-proxy-da-jian/</a></p>
<p><a href="http://www.jianshu.com/p/8ca5501ce556" target="_blank" rel="external">http://www.jianshu.com/p/8ca5501ce556</a></p>
<p><a href="https://www.v2ex.com/t/220006" target="_blank" rel="external">https://www.v2ex.com/t/220006</a></p>
<p><a href="http://www.sn.10086.cn/iphone/y12.html" target="_blank" rel="external">http://www.sn.10086.cn/iphone/y12.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><code>科学上网</code>，真是具有中国特色的一个词汇。德先生我们需要关注，但是赛先生我们更加需要关注。<br>下面介绍一些技术来让大家自由地和国外的赛先生交流。</p>
<p>想自搭科学上网工具的同学，需要准备以下几个<code>硬</code>作案工具。</p>]]>
    </summary>
    
      <category term="APN" scheme="http://git-patrickliu.github.io/tags/APN/"/>
    
      <category term="科学上网" scheme="http://git-patrickliu.github.io/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用jest做单元测试（一)]]></title>
    <link href="http://git-patrickliu.github.io/2015/09/29/jest-start-up/"/>
    <id>http://git-patrickliu.github.io/2015/09/29/jest-start-up/</id>
    <published>2015-09-29T07:26:12.000Z</published>
    <updated>2015-09-29T07:26:49.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="jest" scheme="http://git-patrickliu.github.io/tags/jest/"/>
    
      <category term="unit test" scheme="http://git-patrickliu.github.io/tags/unit-test/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[七牛base64上传以及远程上传API]]></title>
    <link href="http://git-patrickliu.github.io/2015/09/27/qiniu-remote-upload-api/"/>
    <id>http://git-patrickliu.github.io/2015/09/27/qiniu-remote-upload-api/</id>
    <published>2015-09-27T08:03:10.000Z</published>
    <updated>2015-09-29T06:50:25.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://blog.dapenggaofei.com/2015/09/17/qiniu-add-to-favourite/" target="_blank" rel="external">上一篇</a> 文章我们讲到了利用七牛API来实现直接在网页上爬图的功能。主要是用到了下面两个API，在官方文档也找了大半天，没找到一个真正能用的例子，这里就将官方例子丰富一下，以便下次使用的时候能查到。</p>
<h3 id="1-_base64上传">1. base64上传</h3><p>刚开始有做这个chrome扩展的时候，最初就是想着七牛有没有提供base64上传的功能。这样的话，就可以直接将这个功能搞定了，现在想想当时还是太naive。在七牛文档也没搜到base64上传的API，倒是直接在百度搜索的时候搜到了。<a href="http://kb.qiniu.com/5rroxdgb" target="_blank" rel="external">前往七牛查看API</a>。发现竟然在知识库，而不在开发者文档专区，也是奇怪。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">putb64</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> pic = <span class="string">"填写你的base64后的字符串"</span>; <span class="comment">// 这里有一个坑，请除去MIME和base64以及逗号</span></span><br><span class="line">    <span class="keyword">var</span> url = <span class="string">"http://up.qiniu.com/putb64/20264"</span>; <span class="comment">//如果不想计算文件大小，可以改成http://up.qiniu.com/putb64/-1</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.readyState==<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xhr.responseText;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.open(<span class="string">"POST"</span>, url, <span class="literal">true</span>);</span><br><span class="line">    xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/octet-stream"</span>);</span><br><span class="line">    xhr.setRequestHeader(<span class="string">"Authorization"</span>, <span class="string">"UpToken  填写你从服务端获取的上传token"</span>); <span class="comment">//UpToken其实有挺多问题</span></span><br><span class="line">    xhr.send(pic);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面是官方给的JS示例，注释是我加的。有着以下几个问题：</p>
<ol>
<li><p>传的pic的值，一定要是base64之后去掉MIME前面几个字符，以及base64加逗号那几个字符才是正常传的值。<br><img src="http://7xkybo.com1.z0.glb.clouddn.com/qiniu-remote-upload-1.png?v=1" alt="base64字符串"></p>
</li>
<li><p>如果不想算大小的话，比如我，直接在url当中改成-1。</p>
</li>
<li>重点来了，UpToken，其算法在<a href="http://developer.qiniu.com/docs/v6/api/reference/security/put-policy.html" target="_blank" rel="external">官网</a>写得非常清楚 ，但是呢，我一直在scope里面传<code>&lt;bucket&gt;:&lt;key&gt;</code>，一直是返回401，说是授权不合法。后来尝试了一下scope只传<code>&lt;bucket&gt;</code>，但是在saveKey当中传想要的key值，才能授权正常，也是醉了。</li>
</ol>
<p>核心代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> genUpToken = <span class="function"><span class="keyword">function</span>(<span class="params">accessKey, secretKey, putPolicy</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//SETP 2</span></span><br><span class="line">                <span class="keyword">var</span> put_policy = <span class="built_in">JSON</span>.stringify(putPolicy);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//SETP 3</span></span><br><span class="line">                <span class="keyword">var</span> encoded = base64encode(utf16to8(put_policy));</span><br><span class="line"></span><br><span class="line">                <span class="comment">//SETP 4</span></span><br><span class="line">                <span class="keyword">var</span> hash = CryptoJS.HmacSHA1(encoded, secretKey);</span><br><span class="line">                <span class="keyword">var</span> encoded_signed = hash.toString(CryptoJS.enc.Base64);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//SETP 5</span></span><br><span class="line">                <span class="keyword">var</span> upload_token = accessKey + <span class="string">":"</span> + safe64(encoded_signed) + <span class="string">":"</span> + encoded;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> upload_token;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> upToken =</span><br><span class="line">                    genUpToken(</span><br><span class="line">                        YOUR-ACCESS-KEY,</span><br><span class="line">                        YOUR-SECRET-KEY,</span><br><span class="line">                        &#123;</span><br><span class="line">                            scope: YOUR-BUCKET,</span><br><span class="line">                            deadline: <span class="built_in">parseInt</span>(<span class="keyword">new</span> <span class="built_in">Date</span>()/<span class="number">1000</span>, <span class="number">10</span>) + <span class="number">3600</span>, <span class="comment">// 1小时有效期</span></span><br><span class="line">                            saveKey: YOUR-FILENAME</span><br><span class="line">                        &#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="2-_远程上传">2. 远程上传</h3><p>我以为用base64就已经没问题了（通过Canvas在线将图片转在base64），但是在百度爬图的时候，却出现了下面的这个安全错误。</p>
<blockquote>
<p>SecurityError: Failed to execute ‘toDataURL’ on ‘HTMLCanvasElement’: Tainted canvases may not be exported.</p>
</blockquote>
<p>网上查了一下，如果图片没有设置<code>access-control-allow-origin</code>，则使用Canvas是不能将其转为base64的。看来单纯用base64解决不了此种情况了，那么便有了下面这个方法。前往 <a href="http://developer.qiniu.com/docs/v6/api/reference/rs/fetch.html" target="_blank" rel="external">官方文档</a>。</p>
<p>官方文档其实也是有点坑人的。如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /fetch/<span class="xml"><span class="tag">&lt;<span class="title">EncodedURL</span>&gt;</span>/to/<span class="tag">&lt;<span class="title">EncodedEntryURI</span>&gt;</span> HTTP/1.1</span><br><span class="line">Host:           iovip.qbox.me</span><br><span class="line">Content-Type:   application/x-www-form-urlencoded</span><br><span class="line">Authorization:  QBox <span class="tag">&lt;<span class="title">AccessToken</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>这边<code>&lt;EncodedEntryURI&gt;</code>，官方中写着可以为<code>&lt;bucket&gt;:&lt;key&gt;</code>，也可以是<code>&lt;bucket&gt;</code>，其实后来我测下来，只能是<code>&lt;bucket&gt;:&lt;key&gt;</code>，要不然又是401授权失败…</p>
<p>完整代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">       <span class="keyword">var</span> genAccessToken = <span class="function"><span class="keyword">function</span>(<span class="params">accessKey, secretKey, bucket, srcUrl</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">var</span> signingStr = <span class="string">"/fetch/"</span> + safe_base64_encode(srcUrl) + <span class="string">"/to/"</span> + safe_base64_encode(bucket + <span class="string">':'</span> + YOUR-FILENAME) + <span class="string">'\n'</span>; <span class="comment">//记得加\n</span></span><br><span class="line"></span><br><span class="line">           <span class="keyword">var</span> hash = CryptoJS.HmacSHA1(signingStr, secretKey);</span><br><span class="line">           <span class="keyword">var</span> encoded_signed = hash.toString(CryptoJS.enc.Base64);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">var</span> accessToken = accessKey + <span class="string">":"</span> + safe64(encoded_signed);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> accessToken;</span><br><span class="line">       &#125;;</span><br><span class="line"><span class="keyword">var</span> accessToken =</span><br><span class="line">                   genAccessToken(</span><br><span class="line">                       YOUR-ACCESS-KEY,</span><br><span class="line">                       YOUR-SECRET-KEY,</span><br><span class="line">                       YOUR-BUCKET,</span><br><span class="line">                       IMAGE-URL</span><br><span class="line">                   );</span><br></pre></td></tr></table></figure></p>
<p>有兴趣可以去安装一下<a href="https://chrome.google.com/webstore/detail/ojgilmgaopbpimndoelnhacamaabdpni" target="_blank" rel="external">【七牛在线存图】</a>，体验一下在线爬图片的感觉，再也不用担心美图溜走了。<a href="https://github.com/git-patrickliu/QINIU-save-online-images" target="_blank" rel="external">github</a>里面有详细的上传代码。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://blog.dapenggaofei.com/2015/09/17/qiniu-add-to-favourite/" target="_blank" rel="external">上一篇</a> 文章我们讲到了利用七牛API来实现直接在网页上爬]]>
    </summary>
    
      <category term="chrome扩展" scheme="http://git-patrickliu.github.io/tags/chrome%E6%89%A9%E5%B1%95/"/>
    
      <category term="remote-upload" scheme="http://git-patrickliu.github.io/tags/remote-upload/"/>
    
      <category term="七牛" scheme="http://git-patrickliu.github.io/tags/%E4%B8%83%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[将世界美景收纳怀中]]></title>
    <link href="http://git-patrickliu.github.io/2015/09/17/qiniu-add-to-favourite/"/>
    <id>http://git-patrickliu.github.io/2015/09/17/qiniu-add-to-favourite/</id>
    <published>2015-09-17T05:24:40.000Z</published>
    <updated>2015-09-29T06:49:10.000Z</updated>
    <content type="html"><![CDATA[<p>嗯。本文的主题是”将世界美景收纳怀中“， 那如何将世界美景收纳怀中呢？在浏览网站看到好的图片的时候，你是右键下载到本地，最后文件塞满了你的本地硬盘然后最终只好全部删除而收场？此时你需要一个网页自动存储图片工具。</p>
<p>当当当当，”七牛在线存图“工具闪耀登场。这个一个chrome扩展，意思就是只能在chrome浏览器当中使用，<a href="https://chrome.google.com/webstore/detail/%E4%B8%83%E7%89%9B%E5%9C%A8%E7%BA%BF%E5%AD%98%E5%9B%BE/ojgilmgaopbpimndoelnhacamaabdpni" target="_blank" rel="external">【点我下载】</a>。</p>
<p>七牛在线存图到底有什么功能呢？看看以下操作示意图就知晓了。</p>
<ol>
<li>如果不了解七牛是什么？可以先百度之。大家先需要去七牛注册一个账号<a href="https://portal.qiniu.com/signup?code=3lowmdo5c9kya" target="_blank" rel="external">【点我注册】</a>。大家可以在账号里面看到你的Access Token和 Secret Token。</li>
<li>在七牛当中创建文件空间（bucket），并在”空间设置“–》”域名设置“ 当中可以查看到此空间对应的域名。</li>
<li><p>在安装完”七牛在线存图“之后，在弹出的options.html，输入第1步和第2步的数据。<br><img src="http://7xkybo.com1.z0.glb.clouddn.com/qiniu-intro1.png" alt="七牛在线存图设置"></p>
</li>
<li><p>设置完毕之后，你就可以直接在线存图了。看到心宜的图千万不要放过。<br><img src="http://7xkybo.com1.z0.glb.clouddn.com/qiniu-intro.png" alt="在线存图操作"></p>
</li>
<li><p>存图成功之后，就会弹出新的tab，打开刚才保存的图片了。</p>
</li>
</ol>
<p>如果是本地上传文件到七牛，推荐这个chrome扩展，<a href="https://chrome.google.com/webstore/detail/qiniu-upload-files/emmfkgdgapbjphdolealbojmcmnphdcc" target="_blank" rel="external">【点击前往】</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>嗯。本文的主题是”将世界美景收纳怀中“， 那如何将世界美景收纳怀中呢？在浏览网站看到好的图片的时候，你是右键下载到本地，最后文件塞满了你的本地硬盘然后最终只好全部删除而收场？此时你需要一个网页自动存储图片工具。</p>
<p>当当当当，”七牛在线存图“工具闪耀登场。这个一个]]>
    </summary>
    
      <category term="Chrome扩展" scheme="http://git-patrickliu.github.io/tags/Chrome%E6%89%A9%E5%B1%95/"/>
    
      <category term="七牛" scheme="http://git-patrickliu.github.io/tags/%E4%B8%83%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[cordova学习小记（一）]]></title>
    <link href="http://git-patrickliu.github.io/2015/09/17/cordova-first/"/>
    <id>http://git-patrickliu.github.io/2015/09/17/cordova-first/</id>
    <published>2015-09-17T05:18:20.000Z</published>
    <updated>2015-09-28T11:44:24.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="cordova" scheme="http://git-patrickliu.github.io/tags/cordova/"/>
    
      <category term="hybrid app" scheme="http://git-patrickliu.github.io/tags/hybrid-app/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OneAPM，just the one.]]></title>
    <link href="http://git-patrickliu.github.io/2015/09/04/access-in-oneapm/"/>
    <id>http://git-patrickliu.github.io/2015/09/04/access-in-oneapm/</id>
    <published>2015-09-04T14:07:51.000Z</published>
    <updated>2015-09-29T06:44:58.000Z</updated>
    <content type="html"><![CDATA[<p>先用一组数据来开始整篇文章吧。</p>
<ol>
<li>如果亚马逊页面加载每慢100ms，将影响他们1%的收入。</li>
<li>如果谷歌页面加载慢500ms，流量将锐减20%。来自 <a href="http://blog.gigaspaces.com/amazon-found-every-100ms-of-latency-cost-them-1-in-sales/" target="_blank" rel="external">gigaspaces</a></li>
</ol>
<p>这是一组08年的数据，而现在，页面延迟对公司来说影响会更大(虽然网络变快了很多，但是大家使用网络的习惯变化了，现在大家经常是用手机来接入网络，而移动网络是很不稳定的)。<br>页面加载速度，是如此的重要，所以我们就需要对前端页面加载速度进行不断的优化。这第一步自然就是获取用户的真实加载的情况，要不然只能闭门造车，纸上谈兵。</p>
<p>其实，我们在这第一步就受阻了。因为我们发现市面上并没有一款产品足够好用，能够让我们即时检测用户的页面加载情况。我们知道一些大公司是有相关的监控工具，但是没有对外开放。而如果公司内部自己开发的话，将是一个非常大的工程，并且统计出的结果未必精确，之后的维护也是很麻烦的一件事情。还好我们一直都有关注前端的一些技术会议。在报名<a href="velocity.oreilly.com.cn/2015/index.php">Velocity</a>的时候，我们认识了<a href="http://www.oneapm.com" target="_blank" rel="external">OneAPM</a>。</p>
<p>大家可以看看Velocity的赞助商们（不得不吐槽一下，这届Velocity，有一半都是赞助商们的广告），基本都是围绕着APM这个话题。我也趁机将他们中的绝大多数都试用了一下，最后选中了OneAPM作为我们暂时的前端加载速度监测工具。</p>
<p>OneAPM<a href="http://www.oneapm.com/bi/feature.html" target="_blank" rel="external">前端性能监控</a>都有一些什么特色，让我们最终选择了她呢？我总结了一下大概有以下几点：</p>
<h3 id="OneAPM_提供了两种前端监测代码注入方式。">OneAPM 提供了两种前端监测代码注入方式。</h3><p>一种是用户手动在html当中插入script，一种是通过用户部署后台agent自动插入script。</p>
<p>我想说，大家都习惯了用google分析，百度分析，腾讯分析等等，对在页面当中插入一段受信任方的JS并没有多大的反感。所以我开始试用就是采用了第一种方式，方便快捷，并且对代码影响是最小的。有某些APM工具，只支持上面的第二种，门槛略高，要想用一下还得改后台代码，还是挺麻烦了。</p>
<h3 id="OneAPM_提供了非常丰富的展现维度">OneAPM 提供了非常丰富的展现维度</h3><p>大家可以去<a href="http://www.oneapm.com" target="_blank" rel="external">OneAPM</a>上看一下，展现的<code>维度</code>是相当的丰富。</p>
<p><img src="http://7xkybo.com1.z0.glb.clouddn.com/oneapm1.png" alt="OneAPM sidebar "><br>OneAPM并不只是提供简单的浏览器performance的上报，而是对其进行了一定的归纳，将其归为，白屏时间、首屏时间、H5启动时间和网页就绪时间（这样挺好，但是我觉得如果也能同时展示出原始的performance信息，对专业调优的前端会更友好一些）。</p>
<p>还支持<code>浏览器</code>, <code>运营商</code>, <code>地理</code> 三个围度的加载情况查看。提供了慢事务追踪，静态文件加载瀑布流。</p>
<p><img src="http://7xkybo.com1.z0.glb.clouddn.com/oneapm2.png" alt="总览"><br><img src="http://7xkybo.com1.z0.glb.clouddn.com/oneapm3.png" alt="瀑布流"></p>
<p>其实上面2点，是我们最初想要的功能。能提供我们就已经很开心了。后面的几个额外功能更加让我们确信要使用OneAPM了。</p>
<h3 id="Ajax耗时功能">Ajax耗时功能</h3><p>这是一个非常好用的功能。相信后台艰苦卓绝的将后台CGI响应减少了10ms，但是前端一不小心就多了100ms，甚至大几百ms。所以前端AJAX测速同样是非常重要的。我们可以在这查看到哪一些CGI的速度慢，可以进行专项优化。<br><img src="http://7xkybo.com1.z0.glb.clouddn.com/oneapm4.png" alt="Ajax耗时检测"></p>
<h3 id="脚本错误功能">脚本错误功能</h3><p>这个功能不得不赞一下，因为他让我们发现了不少内嵌APP页面的错误。开发过mobile APP内嵌页的同学们都知道，移动端的调试非常麻烦，而移动端的错误就更加难以捕捉。有了这个功能，我们可以迅速知道我们线上页面的健康度（尤其是线上出现重大BUG，突发某一些错误时）。<br><img src="http://7xkybo.com1.z0.glb.clouddn.com/oneapm5.png" alt="脚本错误展示"></p>
<h3 id="HTTPS!!!">HTTPS!!!</h3><p>其实这个最重要。。因为如果不支持HTTPS的话，我们就直接bye bye走人了。因为我们的页面对安全要求比较高，是全站HTTPS的。而OneAPM是HTTP和HTTPS都支持的。<br><img src="http://7xkybo.com1.z0.glb.clouddn.com/oneapm6.png" alt="认准双斜杠"></p>
<h3 id="强大的技术支持">强大的技术支持</h3><p>我只是在试用阶段，北京的OneAPM同学就直接拉了一个群，非常热心地解决我的各种试用问题，和解答各种技术上的疑惑。企业产品和个人产品不一样，企业产品最重要的是要用得放心，舒心。对于我来说，OneAPM做到了。<br><img src="http://7xkybo.com1.z0.glb.clouddn.com/oneapm7.png" alt="技术支持"></p>
<p>综上，有了详细的用户加载时间，我们才能进行下一步的专项优化。</p>
<p>PS: 当然有要吐槽的：</p>
<ol>
<li>吞吐量的单位ppm，还是没有习惯，弄成PV是不是更好一些？</li>
<li>页面展示的维度，取path是不够的，这样容易让开发，测试和线上的数据混在一起（这个据说已在开发了，赞一记）。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>先用一组数据来开始整篇文章吧。</p>
<ol>
<li>如果亚马逊页面加载每慢100ms，将影响他们1%的收入。</li>
<li>如果谷歌页面加载慢500ms，流量将锐减20%。来自 <a href="http://blog.gigaspaces.com/amazon-]]>
    </summary>
    
      <category term="APM" scheme="http://git-patrickliu.github.io/tags/APM/"/>
    
      <category term="OneAPM" scheme="http://git-patrickliu.github.io/tags/OneAPM/"/>
    
      <category term="monitor" scheme="http://git-patrickliu.github.io/tags/monitor/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[接入多说评论]]></title>
    <link href="http://git-patrickliu.github.io/2015/09/04/duoshuo/"/>
    <id>http://git-patrickliu.github.io/2015/09/04/duoshuo/</id>
    <published>2015-09-04T09:22:16.000Z</published>
    <updated>2015-09-04T16:39:17.000Z</updated>
    <content type="html"><![CDATA[<p>我这个blog是基于<a href="http://hexo.io" target="_blank" rel="external">hexo</a>构建的，是纯静态html的。所以评论就是一个问题，在网上搜了一下发现<a href="http://dev.duoshuo.com/" target="_blank" rel="external">多说</a>，可以实现评论的功能。<br>多说是通过在你的页面当中内嵌一个多说的JS来实现评论的功能。所以我们需要将多说的JS内嵌到我们的hexo创建的博客当中。</p>
<h3 id="1-_多说添加网站">1. 多说添加网站</h3><p>当然，首先我们需要在多说添加一个网站，<a href="http://duoshuo.com/create-site/" target="_blank" rel="external">多说创建页面</a>，在此页面添加你自己的网站信息。</p>
<h3 id="2-_拷贝通用代码">2. 拷贝通用代码</h3><p>然后进入对应的管理后台，选择 <code>工具</code> – <code>获取代码</code> – <code>通用代码</code>, 然后可以查看到多说需要你在你的页面中插入的代码。</p>
<h3 id="3-_修改_config-yml">3. 修改_config.yml</h3><p>到hexo你的博客的根目录，在_config.yml里面新增一个变量，如duoshuo_shortname: your-short-name-in-duo-shuo。这个变量名是随便起的，但是要跟下一步对应起来。变量值，是你在第1步当中输入的多说域名。</p>
<h3 id="4-_修改主题中评论代码">4. 修改主题中评论代码</h3><p>到hexo当中找到你选用的themes的文件夹，比如我用的是light的主题，则在themes/light/layout/_partial/comment.ejs, 其实不同的主题，对应的文件是不一样的，这一步就需要大家稍微去看一下里面的代码。比如我这边light主题comment.ejs里面其实已经有light主题内置的facebook或disqus评论组件，然并卵，这是一个不存在的网站。<br>原始代码是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (page.comments)&#123; %&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">section</span> <span class="attribute">id</span>=<span class="value">"comment"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">h1</span> <span class="attribute">class</span>=<span class="value">"title"</span>&gt;</span><span class="tag">&lt;<span class="title">%=</span> <span class="attribute">__</span>('<span class="attribute">comment</span>') %&gt;</span><span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">%</span> <span class="attribute">if</span> (<span class="attribute">theme.comment_provider</span> =<span class="value">=</span> "<span class="attribute">facebook</span>") &#123;</span><br><span class="line">      <span class="attribute">if</span> (<span class="attribute">theme.facebook</span>) &#123; %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">%-</span> <span class="attribute">partial</span>('<span class="attribute">_partial</span>/<span class="attribute">facebook_comment</span>', &#123;<span class="attribute">fbConfig:</span> <span class="attribute">theme.facebook</span>&#125;) %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">%</span> &#125; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">%</span> &#125; <span class="attribute">else</span> <span class="attribute">if</span>(<span class="attribute">config.disqus_shortname</span>) &#123; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"disqus_thread"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">noscript</span>&gt;</span>Please enable JavaScript to view the <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"//disqus.com/?ref_noscript"</span>&gt;</span>comments powered by Disqus.<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">noscript</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">%</span> &#125; %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">%</span> &#125; %&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>在度娘搜示例的时候，里面出现的变量是post，如果二话不说，将代码直接替换，hexo编译的时候会出问题。如<a href="http://dev.duoshuo.com/threads/541d3b2b40b5abcd2e4df0e9" target="_blank" rel="external">多说官方</a>提供了这个示例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (!index &amp;&amp; post.comments &amp;&amp; config.duoshuo_shortname)&#123; %&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="title">section</span> <span class="attribute">id</span>=<span class="value">"comments"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多说评论框 start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"ds-thread"</span> <span class="attribute">data-thread-key</span>=<span class="value">"&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;"</span> <span class="attribute">data-title</span>=<span class="value">"&lt;%= post.title %&gt;"</span> <span class="attribute">data-url</span>=<span class="value">"&lt;%= page.permalink %&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多说评论框 end --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="keyword">var</span> duoshuoQuery = &#123;short_name:<span class="string">'&lt;%= config.duoshuo_shortname %&gt;'</span>&#125;;</span><br><span class="line">      (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ds = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">        ds.type = <span class="string">'text/javascript'</span>;ds.async = <span class="literal">true</span>;</span><br><span class="line">        ds.src = (<span class="built_in">document</span>.location.protocol == <span class="string">'https:'</span> ? <span class="string">'https:'</span> : <span class="string">'http:'</span>) + <span class="string">'//static.duoshuo.com/embed.js'</span>;</span><br><span class="line">        ds.charset = <span class="string">'UTF-8'</span>;</span><br><span class="line">        (<span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>]</span><br><span class="line">         || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]).appendChild(ds);</span><br><span class="line">      &#125;)();</span><br><span class="line">      </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多说公共JS代码 end --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">%</span> &#125; %&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>相信熟悉ejs模板语言的都清楚，如果调用comment.ejs的地方没有传入post参数，则在当前页面不能调用这个值。我们看一下发现在article.ejs当中有调用comment.ejs。最下面一行，<code>&lt;%- partial(&#39;comment&#39;) %&gt;</code>，在页面当中有传入item的值，并且我们简单看了一下item的一些属性值和post有点像，我们大胆地将最后一行改成<code>&lt;%- partial(&#39;comment&#39;, { post: item }) %&gt;</code>，然后运行一下<code>hexo g</code>，发现可行。这样就改好了。</p>
<p>其实对于其他类型的themes其实也是一样的。看一下代码改改变量就ok了。<br>按照之上几步就可以在hexo博客当中插入多说评论。大家有问题欢迎评论。谢谢：)。</p>
<h3 id="参考">参考</h3><ol>
<li>更多的信息请查看 <a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">http://ibruce.info/2013/11/22/hexo-your-blog/</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>我这个blog是基于<a href="http://hexo.io" target="_blank" rel="external">hexo</a>构建的，是纯静态html的。所以评论就是一个问题，在网上搜了一下发现<a href="http://dev.duoshuo.c]]>
    </summary>
    
      <category term="多说" scheme="http://git-patrickliu.github.io/tags/%E5%A4%9A%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Velocity会议总结]]></title>
    <link href="http://git-patrickliu.github.io/2015/08/19/Velocity%E5%A4%A7%E4%BC%9A%E6%80%BB%E7%BB%93/"/>
    <id>http://git-patrickliu.github.io/2015/08/19/Velocity大会总结/</id>
    <published>2015-08-19T11:52:16.000Z</published>
    <updated>2017-04-01T08:31:52.000Z</updated>
    <content type="html"><![CDATA[<p>关键词：https优化，前端加载优化，hybrid，APM(application performance monitor）。</p>
<ol>
<li><p>https优化。</p>
<blockquote>
<ul>
<li>HttpDNS, 通过http方式向第三方的固定IP方式来获取指定域名的IP来进行<a href="这种方式可以解释我们之前域名被加黑名单的问题，但是如果又新增加域名，得客户端随时修改，建议通过下发方式来实现新域名prefetch。">DNS解析</a>（我们可以考虑在客户端新增HttpDNS）</li>
<li>启用[HSTS][^HSTS] （我们尚未全站启用https，所以这个不太好启动）</li>
<li>启用<a href="浏览器在下载服务端的证书之后会向证书发行商验证证书的合法性。因为是向国外网站验证，所以速度慢并存在着失败的可能性。所以可用的做法是在服务器端预先向服务器进行验证，然后打包证书供浏览器下载，这样浏览器就不用再去验证证书的合法性。注意，有效期大概为1个月。详见[网址](https://blog.xjpvictor.info/2013/09/nginx-ocsp-stapling/)。">OCSP Stapling</a>（可以采用，但需要查看兼容性以及要及时更新签名，以及注意证书链大小）</li>
<li>复用session，减少握手次数</li>
<li>精确设置TLS Record Size，size过小，overhead比重增大，size过大，单record的TCP分段过多</li>
<li>TLS硬件加速</li>
<li>SPDY/HTTP2.0，可以研究，但近期可能用不上。</li>
<li>配置Forward secrecy cipher 支持[False start][^falsestart]  （可以采用，省掉一个RTT时间）</li>
<li>升级openssl版本到最新（我们的版本是openssl-1.0.2c）</li>
<li>确认TLS压缩禁用（nginx 1.3.x以上版本都自动关闭，不关闭有漏洞，我们nginx是1.6.3）</li>
<li>确认SNI支持 （已支持，多个证书部署在同一个IP上）</li>
<li>使用 <strong>//</strong>，来引用静态资源文件，保证http能无缝迁到https环境（我们已经使用了，但是一个360的同僚说在某些地方的移动运营商会将<strong>//</strong> 篡改为 <strong>/</strong>。但是iPhone5s 上海中国移动未发现问题）。<br><img src="http://7xkybo.com1.z0.glb.clouddn.com/IMG_0612.JPG" alt="TLS总结"></li>
</ul>
</blockquote>
</li>
<li><p>页面直出方法，对比？</p>
<blockquote>
<ul>
<li>nginx + lua 页面直出（京东618采用）<br><img src="http://7xkybo.com1.z0.glb.clouddn.com/IMG_0571.JPG" alt="nginx + lua"></li>
<li>ATS （apache traffic server）页面直出（Yahoo采用）</li>
<li>nodejs直出</li>
</ul>
</blockquote>
</li>
<li><p>前端加载优化</p>
<blockquote>
<ul>
<li>ebay优化尝试：DSA（dynamic site accelerate）动态加速，加快页面加载，采用WebP格式优化图片大小（理论能优化到以前60%大小）。</li>
<li>composition layer，z-index相同导致的渲染变慢（阿里分享），可查看 <a href="http://www.w3ctech.com/topic/1463" target="_blank" rel="external">css conf</a> 360的分享有讨论此问题。</li>
</ul>
</blockquote>
</li>
<li><p>hybrid</p>
<blockquote>
<ul>
<li>百度 Blend UI系统架构。通过封装统一JS UI API，如果是在百度app内部的webview，则调用的是原生的UI样式，否则调用的是JS统一的<a href="百度blendUI详细如下：">UI样式</a></li>
<li>Yahoo 采用reactjs + <a href="https://facebook.github.io/flux/" target="_blank" rel="external">flux</a></li>
</ul>
</blockquote>
</li>
</ol>
<ol>
<li>APM<blockquote>
<ul>
<li>今年的趋势是APM（application performance monitor），赞助商基本都是APM厂商（云智慧，性能魔方，性能极客，OneAPM，野狗等）。</li>
<li>我们正在试用<a href="https://tpm.oneapm.com/tpm/account/717715137/browser/1326753/overview/#/" target="_blank" rel="external">OneAPM</a>进行页面加载测试。</li>
</ul>
</blockquote>
</li>
</ol>
<h4 id="总结：">总结：</h4><h5 id="一些方法论：">一些方法论：</h5><blockquote>
<ul>
<li>保持simplicity<br><img src="http://7xkybo.com1.z0.glb.clouddn.com/IMG_0560.JPG" alt="保持简单"></li>
<li>build high performance team<br><img src="http://7xkybo.com1.z0.glb.clouddn.com/IMG_0585.JPG" alt="high performance team"></li>
<li>优化问题方法论<br><img src="http://7xkybo.com1.z0.glb.clouddn.com/IMG_0616.JPG" alt="优化步骤"></li>
</ul>
</blockquote>
<h5 id="我们暂时能够跟进的：">我们暂时能够跟进的：</h5><blockquote>
<ul>
<li>客户端采用http协议的httpDNS来加速DNS查询，能有效防止之前DNS解析问题。</li>
<li>https优化全部跟进，已将dev全部改成TLSv1.2，排期全部改造并上线。</li>
<li>CDN动态加速（DSA）咨询，并开启。</li>
<li>hybrid现阶段讨论结果是采用PhoneGap。</li>
<li>试用OneAPM跟进数据，然后基于数据进行优化。</li>
</ul>
</blockquote>
<h5 id="一些有用的网站分享：">一些有用的网站分享：</h5><ol>
<li><p>关于html标准的网站。</p>
<blockquote>
<ul>
<li><a href="http://specifiction.wicg.io" target="_blank" rel="external">specifiction</a>|<a href="http://discourse.wicg.io" target="_blank" rel="external">Discourse</a> ask question</li>
<li>Contribute tests on <a href="http://testthewebforward.org" target="_blank" rel="external">testthewebforward</a></li>
<li><a href="http://www.w3.org/community/wicg" target="_blank" rel="external">W3 Community</a></li>
<li><a href="http://extensiblewebmanifesto.org" target="_blank" rel="external">extensiblewebmanifesto</a></li>
<li><a href="http://webcomponents.org" target="_blank" rel="external">webcomponents</a></li>
</ul>
</blockquote>
</li>
<li><p><a href="https://ssllabs.com/" target="_blank" rel="external">SSLLabs</a> 查看你的网站https安不安全</p>
</li>
<li><a href="http://op.baidu.com/2015/04/https-s01a01/" target="_blank" rel="external">百度https实践</a></li>
</ol>
<p>[^HSTS]: HTTP Strict Transport Security。我们现在请求http的站点时，会自动跳转到https的页面，其实这一步是存在安全风险的，但是通过HSTS，设置响应头Strict-Transport-Security: max-age=31536000; includeSubDomains，可保证用户即使输入http页面，也在浏览器级别会自动请求https页面，不需要经过服务器跳转。</p>
<p>[^falsestart]: 查看<a href="http://chimera.labs.oreilly.com/books/1230000000545/ch04.html" target="_blank" rel="external">网址</a>，啥是false start（抢跑）。</p>
<p><img src="http://7xkybo.com1.z0.glb.clouddn.com/IMG_0593.JPG" alt="blend UI 1"><br><img src="http://7xkybo.com1.z0.glb.clouddn.com/IMG_0594.JPG" alt="blend UI 2"><br><img src="http://7xkybo.com1.z0.glb.clouddn.com/IMG_0595.JPG" alt="blend UI 3"><br><img src="http://7xkybo.com1.z0.glb.clouddn.com/IMG_0596.JPG" alt="blend UI 4"><br><img src="http://7xkybo.com1.z0.glb.clouddn.com/IMG_0597.JPG" alt="blend UI 5"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>关键词：https优化，前端加载优化，hybrid，APM(application performance monitor）。</p>
<ol>
<li><p>https优化。</p>
<blockquote>
<ul>
<li>HttpDNS, 通过http方式向第三方的]]>
    </summary>
    
      <category term="velocity" scheme="http://git-patrickliu.github.io/tags/velocity/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[reactjs]]></title>
    <link href="http://git-patrickliu.github.io/2015/08/19/reactjs/"/>
    <id>http://git-patrickliu.github.io/2015/08/19/reactjs/</id>
    <published>2015-08-19T11:51:16.000Z</published>
    <updated>2015-09-04T10:11:18.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="reactjs" scheme="http://git-patrickliu.github.io/tags/reactjs/"/>
    
  </entry>
  
</feed>
